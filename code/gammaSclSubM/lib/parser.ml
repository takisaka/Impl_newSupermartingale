type token =
  | FLOAT of (float)
  | POSINT of (int)
  | ID of (string)
  | SKIP
  | SEMICOLON
  | IF
  | THEN
  | ELSE
  | FI
  | WHILE
  | DO
  | OD
  | ASSUME
  | ASSERT
  | TRUE
  | FALSE
  | ASSGN
  | NDET
  | PLUS
  | STAR
  | MINUS
  | AND
  | OR
  | HAT
  | INT
  | REAL
  | LSQBRACKET
  | COMMA
  | RSQBRACKET
  | LT
  | GT
  | LEQ
  | GEQ
  | EQ
  | NOT
  | PROB
  | LPARAN
  | RPARAN
  | DOLLAR
  | LBRACKET
  | RBRACKET
  | EOF

open Parsing;;
let _ = parse_error;;
# 2 "lib/parser.mly"
  open Syntax
  (* ここに書いたものは，ExampleParser.mliに入らないので注意 *)
# 51 "lib/parser.ml"
let yytransl_const = [|
  260 (* SKIP *);
  261 (* SEMICOLON *);
  262 (* IF *);
  263 (* THEN *);
  264 (* ELSE *);
  265 (* FI *);
  266 (* WHILE *);
  267 (* DO *);
  268 (* OD *);
  269 (* ASSUME *);
  270 (* ASSERT *);
  271 (* TRUE *);
  272 (* FALSE *);
  273 (* ASSGN *);
  274 (* NDET *);
  275 (* PLUS *);
  276 (* STAR *);
  277 (* MINUS *);
  278 (* AND *);
  279 (* OR *);
  280 (* HAT *);
  281 (* INT *);
  282 (* REAL *);
  283 (* LSQBRACKET *);
  284 (* COMMA *);
  285 (* RSQBRACKET *);
  286 (* LT *);
  287 (* GT *);
  288 (* LEQ *);
  289 (* GEQ *);
  290 (* EQ *);
  291 (* NOT *);
  292 (* PROB *);
  293 (* LPARAN *);
  294 (* RPARAN *);
  295 (* DOLLAR *);
  296 (* LBRACKET *);
  297 (* RBRACKET *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* FLOAT *);
  258 (* POSINT *);
  259 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\004\000\004\000\
\004\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
\009\000\009\000\009\000\012\000\012\000\012\000\012\000\006\000\
\006\000\013\000\013\000\013\000\013\000\014\000\014\000\014\000\
\014\000\014\000\014\000\014\000\005\000\005\000\005\000\007\000\
\010\000\015\000\015\000\011\000\011\000\011\000\011\000\002\000\
\000\000"

let yylen = "\002\000\
\003\000\002\000\001\000\001\000\003\000\003\000\007\000\005\000\
\003\000\003\000\002\000\004\000\004\000\002\000\003\000\004\000\
\003\000\001\000\001\000\003\000\003\000\003\000\003\000\003\000\
\003\000\001\000\003\000\001\000\001\000\006\000\006\000\001\000\
\003\000\003\000\003\000\001\000\003\000\001\000\001\000\003\000\
\003\000\003\000\003\000\002\000\001\000\004\000\001\000\001\000\
\004\000\001\000\003\000\001\000\001\000\002\000\002\000\002\000\
\002\000"

let yydefred = "\000\000\
\000\000\000\000\048\000\004\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\057\000\000\000\000\000\003\000\
\000\000\053\000\052\000\038\000\039\000\045\000\000\000\000\000\
\000\000\000\000\000\000\047\000\019\000\000\000\018\000\000\000\
\036\000\000\000\011\000\014\000\000\000\000\000\056\000\000\000\
\000\000\000\000\002\000\000\000\055\000\054\000\000\000\000\000\
\044\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\005\000\000\000\001\000\006\000\000\000\000\000\
\000\000\017\000\000\000\000\000\020\000\034\000\000\000\000\000\
\000\000\000\000\024\000\000\000\000\000\000\000\000\000\000\000\
\037\000\033\000\000\000\013\000\012\000\000\000\000\000\000\000\
\000\000\016\000\000\000\046\000\000\000\008\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\049\000\000\000\
\000\000\025\000\027\000\007\000\051\000\000\000\000\000\000\000\
\000\000\030\000\031\000"

let yydgoto = "\002\000\
\013\000\014\000\015\000\016\000\027\000\028\000\029\000\030\000\
\098\000\074\000\031\000\099\000\032\000\033\000\104\000"

let yysindex = "\007\000\
\029\255\000\000\000\000\000\000\128\255\121\255\121\255\121\255\
\121\255\088\255\121\255\121\255\000\000\088\255\011\000\000\000\
\249\254\000\000\000\000\000\000\000\000\000\000\071\255\151\255\
\242\254\121\255\041\255\000\000\000\000\150\255\000\000\058\255\
\000\000\050\255\000\000\000\000\034\255\254\254\000\000\036\255\
\012\000\088\255\000\000\158\255\000\000\000\000\025\255\186\255\
\000\000\003\255\170\255\248\254\088\255\025\255\025\255\025\255\
\080\255\025\255\025\255\025\255\025\255\025\255\121\255\121\255\
\088\255\088\255\000\000\088\255\000\000\000\000\051\255\012\255\
\126\255\000\000\066\255\057\255\000\000\000\000\045\255\005\255\
\065\255\005\255\000\000\126\255\126\255\126\255\126\255\126\255\
\000\000\000\000\042\255\000\000\000\000\003\255\070\255\076\255\
\012\255\000\000\082\255\000\000\088\255\000\000\081\255\078\255\
\003\255\003\255\079\255\012\255\046\255\003\255\000\000\091\255\
\092\255\000\000\000\000\000\000\000\000\003\255\003\255\097\255\
\098\255\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\057\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\212\000\000\000\223\000\000\000\000\000\068\001\000\000\
\251\000\000\000\000\000\000\000\000\000\000\000\000\000\040\000\
\001\000\079\000\000\000\118\000\157\000\196\000\235\000\018\001\
\000\000\000\000\000\000\000\000\000\000\000\000\134\000\173\000\
\000\000\000\000\095\001\000\000\000\000\000\000\083\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\248\255\000\000\000\000\010\000\255\255\052\000\
\179\255\000\000\221\255\000\000\237\255\108\000\023\000"

let yytablesize = 645
let yytable = "\017\000\
\023\000\038\000\042\000\018\000\019\000\041\000\052\000\001\000\
\017\000\044\000\043\000\069\000\017\000\063\000\076\000\034\000\
\035\000\036\000\037\000\107\000\039\000\040\000\050\000\023\000\
\055\000\018\000\019\000\003\000\057\000\078\000\115\000\003\000\
\004\000\070\000\005\000\067\000\095\000\096\000\006\000\021\000\
\017\000\007\000\008\000\089\000\079\000\023\000\042\000\053\000\
\097\000\042\000\042\000\017\000\101\000\102\000\116\000\009\000\
\091\000\092\000\103\000\093\000\065\000\047\000\066\000\017\000\
\017\000\010\000\017\000\011\000\012\000\112\000\113\000\045\000\
\046\000\090\000\103\000\048\000\068\000\051\000\022\000\063\000\
\064\000\083\000\120\000\121\000\054\000\055\000\056\000\094\000\
\057\000\057\000\003\000\004\000\109\000\005\000\100\000\073\000\
\105\000\006\000\075\000\017\000\007\000\008\000\106\000\077\000\
\108\000\080\000\081\000\082\000\110\000\084\000\085\000\086\000\
\087\000\088\000\009\000\111\000\114\000\042\000\118\000\119\000\
\050\000\018\000\019\000\003\000\010\000\122\000\123\000\012\000\
\018\000\019\000\003\000\049\000\117\000\028\000\000\000\020\000\
\021\000\000\000\000\000\000\000\000\000\023\000\020\000\021\000\
\054\000\055\000\056\000\022\000\023\000\057\000\000\000\018\000\
\019\000\003\000\000\000\024\000\043\000\026\000\018\000\019\000\
\071\000\000\000\024\000\025\000\026\000\020\000\021\000\000\000\
\054\000\055\000\056\000\023\000\029\000\057\000\000\000\072\000\
\000\000\000\000\023\000\058\000\059\000\060\000\061\000\062\000\
\000\000\024\000\000\000\047\000\054\000\055\000\056\000\000\000\
\000\000\057\000\047\000\040\000\000\000\000\000\000\000\058\000\
\059\000\060\000\061\000\062\000\054\000\055\000\056\000\077\000\
\000\000\057\000\000\000\010\000\000\000\000\000\000\000\058\000\
\059\000\060\000\061\000\000\000\000\000\000\000\009\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\041\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\015\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\023\000\023\000\023\000\023\000\023\000\
\023\000\023\000\023\000\023\000\023\000\023\000\023\000\042\000\
\042\000\035\000\000\000\023\000\023\000\023\000\023\000\023\000\
\000\000\000\000\000\000\023\000\000\000\023\000\023\000\023\000\
\023\000\023\000\023\000\000\000\000\000\023\000\023\000\000\000\
\023\000\023\000\021\000\021\000\021\000\021\000\021\000\021\000\
\021\000\021\000\021\000\021\000\021\000\021\000\000\000\000\000\
\032\000\000\000\021\000\000\000\021\000\021\000\021\000\000\000\
\000\000\000\000\021\000\048\000\021\000\021\000\021\000\021\000\
\021\000\021\000\000\000\000\000\021\000\021\000\000\000\021\000\
\021\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
\022\000\022\000\022\000\022\000\022\000\000\000\026\000\000\000\
\000\000\022\000\000\000\022\000\022\000\022\000\000\000\000\000\
\000\000\022\000\000\000\022\000\022\000\022\000\022\000\022\000\
\022\000\000\000\000\000\022\000\022\000\000\000\022\000\022\000\
\042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
\042\000\042\000\042\000\042\000\000\000\000\000\000\000\000\000\
\000\000\000\000\028\000\042\000\042\000\028\000\028\000\000\000\
\042\000\028\000\042\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\042\000\042\000\028\000\042\000\042\000\043\000\
\043\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
\043\000\043\000\043\000\028\000\000\000\000\000\000\000\000\000\
\000\000\029\000\043\000\043\000\029\000\029\000\000\000\043\000\
\029\000\043\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\043\000\043\000\029\000\043\000\043\000\040\000\040\000\
\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
\040\000\040\000\029\000\000\000\000\000\000\000\000\000\000\000\
\010\000\040\000\040\000\010\000\010\000\000\000\040\000\010\000\
\040\000\000\000\000\000\009\000\000\000\000\000\009\000\009\000\
\040\000\040\000\009\000\040\000\040\000\041\000\041\000\041\000\
\041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
\041\000\010\000\000\000\000\000\000\000\000\000\000\000\015\000\
\041\000\041\000\015\000\015\000\009\000\041\000\015\000\041\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\041\000\
\041\000\000\000\041\000\041\000\035\000\035\000\035\000\035\000\
\035\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
\015\000\000\000\000\000\000\000\000\000\000\000\000\000\035\000\
\035\000\000\000\000\000\000\000\035\000\000\000\035\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\035\000\035\000\
\000\000\035\000\035\000\032\000\032\000\032\000\032\000\032\000\
\032\000\032\000\032\000\032\000\032\000\032\000\032\000\000\000\
\048\000\000\000\000\000\048\000\048\000\000\000\000\000\048\000\
\000\000\000\000\000\000\032\000\000\000\032\000\048\000\048\000\
\048\000\000\000\000\000\048\000\000\000\032\000\032\000\000\000\
\032\000\032\000\000\000\026\000\000\000\000\000\026\000\026\000\
\000\000\048\000\026\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\026\000"

let yycheck = "\001\000\
\000\000\010\000\005\001\001\001\002\001\014\000\026\000\001\000\
\010\000\017\001\000\000\000\000\014\000\022\001\050\000\006\000\
\007\000\008\000\009\000\097\000\011\000\012\000\037\001\021\001\
\020\001\001\001\002\001\003\001\024\001\038\001\108\000\003\001\
\004\001\042\000\006\001\038\001\025\001\026\001\010\001\000\000\
\042\000\013\001\014\001\063\000\053\000\021\001\005\001\007\001\
\037\001\005\001\005\001\053\000\008\001\012\001\009\001\027\001\
\065\000\066\000\094\000\068\000\011\001\037\001\029\001\065\000\
\066\000\037\001\068\000\039\001\040\001\105\000\106\000\001\001\
\002\001\064\000\110\000\024\000\041\001\026\000\000\000\022\001\
\023\001\002\001\118\000\119\000\019\001\020\001\021\001\037\001\
\024\001\024\001\003\001\004\001\101\000\006\001\038\001\044\000\
\027\001\010\001\047\000\101\000\013\001\014\001\027\001\038\001\
\023\001\054\000\055\000\056\000\028\001\058\000\059\000\060\000\
\061\000\062\000\027\001\038\001\038\001\000\000\028\001\028\001\
\038\001\001\001\002\001\003\001\037\001\029\001\029\001\040\001\
\001\001\002\001\003\001\024\000\110\000\000\000\255\255\015\001\
\016\001\255\255\255\255\255\255\255\255\021\001\015\001\016\001\
\019\001\020\001\021\001\020\001\021\001\024\001\255\255\001\001\
\002\001\003\001\255\255\035\001\000\000\037\001\001\001\002\001\
\003\001\255\255\035\001\036\001\037\001\015\001\016\001\255\255\
\019\001\020\001\021\001\021\001\000\000\024\001\255\255\018\001\
\255\255\255\255\021\001\030\001\031\001\032\001\033\001\034\001\
\255\255\035\001\255\255\037\001\019\001\020\001\021\001\255\255\
\255\255\024\001\037\001\000\000\255\255\255\255\255\255\030\001\
\031\001\032\001\033\001\034\001\019\001\020\001\021\001\038\001\
\255\255\024\001\255\255\000\000\255\255\255\255\255\255\030\001\
\031\001\032\001\033\001\255\255\255\255\255\255\000\000\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\000\000\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\000\000\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\005\001\
\005\001\000\000\255\255\019\001\020\001\021\001\022\001\023\001\
\255\255\255\255\255\255\027\001\255\255\029\001\030\001\031\001\
\032\001\033\001\034\001\255\255\255\255\037\001\038\001\255\255\
\040\001\041\001\003\001\004\001\005\001\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\255\255\255\255\
\000\000\255\255\019\001\255\255\021\001\022\001\023\001\255\255\
\255\255\255\255\027\001\000\000\029\001\030\001\031\001\032\001\
\033\001\034\001\255\255\255\255\037\001\038\001\255\255\040\001\
\041\001\003\001\004\001\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\255\255\000\000\255\255\
\255\255\019\001\255\255\021\001\022\001\023\001\255\255\255\255\
\255\255\027\001\255\255\029\001\030\001\031\001\032\001\033\001\
\034\001\255\255\255\255\037\001\038\001\255\255\040\001\041\001\
\003\001\004\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\255\255\255\255\255\255\255\255\
\255\255\255\255\005\001\022\001\023\001\008\001\009\001\255\255\
\027\001\012\001\029\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\037\001\038\001\023\001\040\001\041\001\003\001\
\004\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\038\001\255\255\255\255\255\255\255\255\
\255\255\005\001\022\001\023\001\008\001\009\001\255\255\027\001\
\012\001\029\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\037\001\038\001\023\001\040\001\041\001\003\001\004\001\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\038\001\255\255\255\255\255\255\255\255\255\255\
\005\001\022\001\023\001\008\001\009\001\255\255\027\001\012\001\
\029\001\255\255\255\255\005\001\255\255\255\255\008\001\009\001\
\037\001\038\001\012\001\040\001\041\001\003\001\004\001\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\038\001\255\255\255\255\255\255\255\255\255\255\005\001\
\022\001\023\001\008\001\009\001\038\001\027\001\012\001\029\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\037\001\
\038\001\255\255\040\001\041\001\003\001\004\001\005\001\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\038\001\255\255\255\255\255\255\255\255\255\255\255\255\022\001\
\023\001\255\255\255\255\255\255\027\001\255\255\029\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\037\001\038\001\
\255\255\040\001\041\001\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\255\255\
\005\001\255\255\255\255\008\001\009\001\255\255\255\255\012\001\
\255\255\255\255\255\255\027\001\255\255\029\001\019\001\020\001\
\021\001\255\255\255\255\024\001\255\255\037\001\038\001\255\255\
\040\001\041\001\255\255\005\001\255\255\255\255\008\001\009\001\
\255\255\038\001\012\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\038\001"

let yynames_const = "\
  SKIP\000\
  SEMICOLON\000\
  IF\000\
  THEN\000\
  ELSE\000\
  FI\000\
  WHILE\000\
  DO\000\
  OD\000\
  ASSUME\000\
  ASSERT\000\
  TRUE\000\
  FALSE\000\
  ASSGN\000\
  NDET\000\
  PLUS\000\
  STAR\000\
  MINUS\000\
  AND\000\
  OR\000\
  HAT\000\
  INT\000\
  REAL\000\
  LSQBRACKET\000\
  COMMA\000\
  RSQBRACKET\000\
  LT\000\
  GT\000\
  LEQ\000\
  GEQ\000\
  EQ\000\
  NOT\000\
  PROB\000\
  LPARAN\000\
  RPARAN\000\
  DOLLAR\000\
  LBRACKET\000\
  RBRACKET\000\
  EOF\000\
  "

let yynames_block = "\
  FLOAT\000\
  POSINT\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'global) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmt) in
    Obj.repr(
# 28 "lib/parser.mly"
                    ( Prog (_1,_2) )
# 405 "lib/parser.ml"
               : Syntax.prog))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt) in
    Obj.repr(
# 29 "lib/parser.mly"
             ( Prog (BexpOr (AffUnit,BexpUnit),_1) )
# 412 "lib/parser.ml"
               : Syntax.prog))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'assgn) in
    Obj.repr(
# 33 "lib/parser.mly"
          ( StAssgn _1 )
# 419 "lib/parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 34 "lib/parser.mly"
         ( StSkip )
# 425 "lib/parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmt) in
    Obj.repr(
# 35 "lib/parser.mly"
                       ( _2 )
# 432 "lib/parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 36 "lib/parser.mly"
                        ( StSeq (_1, _3) )
# 440 "lib/parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'ndbexpr) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'stmt) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'stmt) in
    Obj.repr(
# 37 "lib/parser.mly"
                                      ( StIf (_2, _4, _6) )
# 449 "lib/parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'bexpr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'stmt) in
    Obj.repr(
# 38 "lib/parser.mly"
                           ( StWhile (_2, _4) )
# 457 "lib/parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'bexpr) in
    Obj.repr(
# 39 "lib/parser.mly"
                            ( StAssume _2 )
# 464 "lib/parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'bexpr) in
    Obj.repr(
# 40 "lib/parser.mly"
                                ( StAssert _2 )
# 471 "lib/parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'bexpr) in
    Obj.repr(
# 41 "lib/parser.mly"
                 ( StAssume _2 )
# 478 "lib/parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'bexpr) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 42 "lib/parser.mly"
                                 ( StSeq(StAssume _2, _4) )
# 486 "lib/parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'bexpr) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 43 "lib/parser.mly"
                                     ( StSeq(StAssert _2, _4) )
# 494 "lib/parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'bexpr) in
    Obj.repr(
# 44 "lib/parser.mly"
                 ( StAssert _2 )
# 501 "lib/parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pvar) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 48 "lib/parser.mly"
                    ( AsnDet (_1, _3) )
# 509 "lib/parser.ml"
               : 'assgn))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'pvar) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'dom) in
    Obj.repr(
# 49 "lib/parser.mly"
                        ( AsnNdet (_1, _4) )
# 517 "lib/parser.ml"
               : 'assgn))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pvar) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'dist) in
    Obj.repr(
# 50 "lib/parser.mly"
                    ( AsnProb (_1, _3) )
# 525 "lib/parser.ml"
               : 'assgn))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'const) in
    Obj.repr(
# 54 "lib/parser.mly"
          ( EConst _1 )
# 532 "lib/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pvar) in
    Obj.repr(
# 55 "lib/parser.mly"
         ( EVar _1 )
# 539 "lib/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 56 "lib/parser.mly"
                       ( _2 )
# 546 "lib/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 57 "lib/parser.mly"
                   ( EAdd (_1, _3) )
# 554 "lib/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 58 "lib/parser.mly"
                    ( ESub (_1, _3) )
# 562 "lib/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 59 "lib/parser.mly"
                   ( EMult (_1, _3) )
# 570 "lib/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 60 "lib/parser.mly"
                    (
        let rec exp b i =
          if i < 0 then
            failwith "exponent should be greater than 0. (form poly_parser.mly)"
          else if i = 0 then
            EConst (Const 1.)
          else if i = 1 then
            b
          else
            EMult (b, (exp b (i -1)))
        in exp _1 _3
      )
# 589 "lib/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'dom) in
    Obj.repr(
# 75 "lib/parser.mly"
                      ( _2 )
# 596 "lib/parser.ml"
               : 'dom))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'dom_basis) in
    Obj.repr(
# 76 "lib/parser.mly"
              ( _1 )
# 603 "lib/parser.ml"
               : 'dom))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'dom_basis) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'dom) in
    Obj.repr(
# 77 "lib/parser.mly"
                     ( DOr (_1, _3) )
# 611 "lib/parser.ml"
               : 'dom))
; (fun __caml_parser_env ->
    Obj.repr(
# 80 "lib/parser.mly"
        ( DInt )
# 617 "lib/parser.ml"
               : 'dom_basis))
; (fun __caml_parser_env ->
    Obj.repr(
# 81 "lib/parser.mly"
         ( DReal )
# 623 "lib/parser.ml"
               : 'dom_basis))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'const) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'const) in
    Obj.repr(
# 82 "lib/parser.mly"
                                                ( DIntInterval (_3, _5) )
# 631 "lib/parser.ml"
               : 'dom_basis))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'const) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'const) in
    Obj.repr(
# 83 "lib/parser.mly"
                                                 ( DRealInterval (_3, _5) )
# 639 "lib/parser.ml"
               : 'dom_basis))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'affexpr) in
    Obj.repr(
# 87 "lib/parser.mly"
            ( BexpOr (_1,BexpUnit) )
# 646 "lib/parser.ml"
               : 'bexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'affexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'bexpr) in
    Obj.repr(
# 88 "lib/parser.mly"
                     ( BexpOr (_1, _3) )
# 654 "lib/parser.ml"
               : 'bexpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'affexpr) in
    Obj.repr(
# 92 "lib/parser.mly"
                          ( _2 )
# 661 "lib/parser.ml"
               : 'affexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 93 "lib/parser.mly"
                 ( AffAnd (LitGeq (_1, _3), AffAnd(LitLeq (_1, _3),AffUnit)) )
# 669 "lib/parser.ml"
               : 'affexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'literal) in
    Obj.repr(
# 94 "lib/parser.mly"
            ( AffAnd (_1,AffUnit) )
# 676 "lib/parser.ml"
               : 'affexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'affexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'affexpr) in
    Obj.repr(
# 95 "lib/parser.mly"
                        ( and_affexpr _1 _3 )
# 684 "lib/parser.ml"
               : 'affexpr))
; (fun __caml_parser_env ->
    Obj.repr(
# 99 "lib/parser.mly"
         ( LitLeq (EConst (Const 0.), EConst (Const 1.)) )
# 690 "lib/parser.ml"
               : 'literal))
; (fun __caml_parser_env ->
    Obj.repr(
# 100 "lib/parser.mly"
          ( LitLeq (EConst (Const 0.), EConst (Const (-1.))) )
# 696 "lib/parser.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 101 "lib/parser.mly"
                  ( LitLeq (_1, _3) )
# 704 "lib/parser.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 102 "lib/parser.mly"
                  ( LitGeq (_1, _3) )
# 712 "lib/parser.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 103 "lib/parser.mly"
                 ( LitNot (LitLeq (_3, _1)) )
# 720 "lib/parser.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 104 "lib/parser.mly"
                 ( LitNot (LitGeq (_3, _1)) )
# 728 "lib/parser.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'literal) in
    Obj.repr(
# 105 "lib/parser.mly"
                ( LitNot _2 )
# 735 "lib/parser.ml"
               : 'literal))
; (fun __caml_parser_env ->
    Obj.repr(
# 109 "lib/parser.mly"
         ( Ndet_branch )
# 741 "lib/parser.ml"
               : 'ndbexpr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'const) in
    Obj.repr(
# 110 "lib/parser.mly"
                             ( Prob_branch _3 )
# 748 "lib/parser.ml"
               : 'ndbexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'bexpr) in
    Obj.repr(
# 111 "lib/parser.mly"
          ( Det_branch _1 )
# 755 "lib/parser.ml"
               : 'ndbexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 115 "lib/parser.mly"
       ( PVar _1 )
# 762 "lib/parser.ml"
               : 'pvar))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'const_list) in
    Obj.repr(
# 119 "lib/parser.mly"
                                ( Dist (_1, _3) )
# 770 "lib/parser.ml"
               : 'dist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'const) in
    Obj.repr(
# 123 "lib/parser.mly"
          ( [_1] )
# 777 "lib/parser.ml"
               : 'const_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'const) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'const_list) in
    Obj.repr(
# 124 "lib/parser.mly"
                           ( _1 :: _3 )
# 785 "lib/parser.ml"
               : 'const_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 128 "lib/parser.mly"
           ( Const (float_of_int _1) )
# 792 "lib/parser.ml"
               : 'const))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 129 "lib/parser.mly"
          ( Const _1 )
# 799 "lib/parser.ml"
               : 'const))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 130 "lib/parser.mly"
                 ( Const (float_of_int (-_2)) )
# 806 "lib/parser.ml"
               : 'const))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 131 "lib/parser.mly"
                ( Const (-1. *. _2) )
# 813 "lib/parser.ml"
               : 'const))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'bexpr) in
    Obj.repr(
# 135 "lib/parser.mly"
                 ( _2 )
# 820 "lib/parser.ml"
               : 'global))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Syntax.prog)
