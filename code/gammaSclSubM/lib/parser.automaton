State 0:
program' -> . program [ # ]
-- On WHILE shift to state 1
-- On SKIP shift to state 46
-- On LPARAN shift to state 47
-- On LBRACKET shift to state 48
-- On IF shift to state 51
-- On ID shift to state 9
-- On DOLLAR shift to state 110
-- On ASSUME shift to state 59
-- On ASSERT shift to state 64
-- On stmt shift to state 112
-- On pvar shift to state 69
-- On program shift to state 114
-- On global shift to state 115
-- On assgn shift to state 100

State 1:
stmt -> WHILE . bexpr DO stmt OD [ SEMICOLON RPARAN OD FI EOF ELSE ]
-- On TRUE shift to state 2
-- On POSINT shift to state 3
-- On NOT shift to state 4
-- On MINUS shift to state 5
-- On LPARAN shift to state 34
-- On ID shift to state 9
-- On FLOAT shift to state 10
-- On FALSE shift to state 23
-- On pvar shift to state 11
-- On literal shift to state 35
-- On expr shift to state 42
-- On const shift to state 17
-- On bexpr shift to state 44
-- On affexpr shift to state 61

State 2:
literal -> TRUE . [ WHILE THEN SKIP SEMICOLON RPARAN RBRACKET OR OD LPARAN LBRACKET IF ID FI EOF ELSE DO ASSUME ASSERT AND ]
-- On WHILE reduce production literal -> TRUE 
-- On THEN reduce production literal -> TRUE 
-- On SKIP reduce production literal -> TRUE 
-- On SEMICOLON reduce production literal -> TRUE 
-- On RPARAN reduce production literal -> TRUE 
-- On RBRACKET reduce production literal -> TRUE 
-- On OR reduce production literal -> TRUE 
-- On OD reduce production literal -> TRUE 
-- On LPARAN reduce production literal -> TRUE 
-- On LBRACKET reduce production literal -> TRUE 
-- On IF reduce production literal -> TRUE 
-- On ID reduce production literal -> TRUE 
-- On FI reduce production literal -> TRUE 
-- On EOF reduce production literal -> TRUE 
-- On ELSE reduce production literal -> TRUE 
-- On DO reduce production literal -> TRUE 
-- On ASSUME reduce production literal -> TRUE 
-- On ASSERT reduce production literal -> TRUE 
-- On AND reduce production literal -> TRUE 

State 3:
const -> POSINT . [ WHILE THEN STAR SKIP SEMICOLON RSQBRACKET RPARAN RBRACKET PLUS OR OD MINUS LT LPARAN LEQ LBRACKET IF ID HAT GT GEQ FI EQ EOF ELSE DO COMMA ASSUME ASSERT AND ]
-- On WHILE reduce production const -> POSINT 
-- On THEN reduce production const -> POSINT 
-- On STAR reduce production const -> POSINT 
-- On SKIP reduce production const -> POSINT 
-- On SEMICOLON reduce production const -> POSINT 
-- On RSQBRACKET reduce production const -> POSINT 
-- On RPARAN reduce production const -> POSINT 
-- On RBRACKET reduce production const -> POSINT 
-- On PLUS reduce production const -> POSINT 
-- On OR reduce production const -> POSINT 
-- On OD reduce production const -> POSINT 
-- On MINUS reduce production const -> POSINT 
-- On LT reduce production const -> POSINT 
-- On LPARAN reduce production const -> POSINT 
-- On LEQ reduce production const -> POSINT 
-- On LBRACKET reduce production const -> POSINT 
-- On IF reduce production const -> POSINT 
-- On ID reduce production const -> POSINT 
-- On HAT reduce production const -> POSINT 
-- On GT reduce production const -> POSINT 
-- On GEQ reduce production const -> POSINT 
-- On FI reduce production const -> POSINT 
-- On EQ reduce production const -> POSINT 
-- On EOF reduce production const -> POSINT 
-- On ELSE reduce production const -> POSINT 
-- On DO reduce production const -> POSINT 
-- On COMMA reduce production const -> POSINT 
-- On ASSUME reduce production const -> POSINT 
-- On ASSERT reduce production const -> POSINT 
-- On AND reduce production const -> POSINT 

State 4:
literal -> NOT . literal [ WHILE THEN SKIP SEMICOLON RPARAN RBRACKET OR OD LPARAN LBRACKET IF ID FI EOF ELSE DO ASSUME ASSERT AND ]
-- On TRUE shift to state 2
-- On POSINT shift to state 3
-- On NOT shift to state 4
-- On MINUS shift to state 5
-- On LPARAN shift to state 8
-- On ID shift to state 9
-- On FLOAT shift to state 10
-- On FALSE shift to state 23
-- On pvar shift to state 11
-- On literal shift to state 24
-- On expr shift to state 25
-- On const shift to state 17

State 5:
const -> MINUS . POSINT [ WHILE THEN STAR SKIP SEMICOLON RSQBRACKET RPARAN RBRACKET PLUS OR OD MINUS LT LPARAN LEQ LBRACKET IF ID HAT GT GEQ FI EQ EOF ELSE DO COMMA ASSUME ASSERT AND ]
const -> MINUS . FLOAT [ WHILE THEN STAR SKIP SEMICOLON RSQBRACKET RPARAN RBRACKET PLUS OR OD MINUS LT LPARAN LEQ LBRACKET IF ID HAT GT GEQ FI EQ EOF ELSE DO COMMA ASSUME ASSERT AND ]
-- On POSINT shift to state 6
-- On FLOAT shift to state 7

State 6:
const -> MINUS POSINT . [ WHILE THEN STAR SKIP SEMICOLON RSQBRACKET RPARAN RBRACKET PLUS OR OD MINUS LT LPARAN LEQ LBRACKET IF ID HAT GT GEQ FI EQ EOF ELSE DO COMMA ASSUME ASSERT AND ]
-- On WHILE reduce production const -> MINUS POSINT 
-- On THEN reduce production const -> MINUS POSINT 
-- On STAR reduce production const -> MINUS POSINT 
-- On SKIP reduce production const -> MINUS POSINT 
-- On SEMICOLON reduce production const -> MINUS POSINT 
-- On RSQBRACKET reduce production const -> MINUS POSINT 
-- On RPARAN reduce production const -> MINUS POSINT 
-- On RBRACKET reduce production const -> MINUS POSINT 
-- On PLUS reduce production const -> MINUS POSINT 
-- On OR reduce production const -> MINUS POSINT 
-- On OD reduce production const -> MINUS POSINT 
-- On MINUS reduce production const -> MINUS POSINT 
-- On LT reduce production const -> MINUS POSINT 
-- On LPARAN reduce production const -> MINUS POSINT 
-- On LEQ reduce production const -> MINUS POSINT 
-- On LBRACKET reduce production const -> MINUS POSINT 
-- On IF reduce production const -> MINUS POSINT 
-- On ID reduce production const -> MINUS POSINT 
-- On HAT reduce production const -> MINUS POSINT 
-- On GT reduce production const -> MINUS POSINT 
-- On GEQ reduce production const -> MINUS POSINT 
-- On FI reduce production const -> MINUS POSINT 
-- On EQ reduce production const -> MINUS POSINT 
-- On EOF reduce production const -> MINUS POSINT 
-- On ELSE reduce production const -> MINUS POSINT 
-- On DO reduce production const -> MINUS POSINT 
-- On COMMA reduce production const -> MINUS POSINT 
-- On ASSUME reduce production const -> MINUS POSINT 
-- On ASSERT reduce production const -> MINUS POSINT 
-- On AND reduce production const -> MINUS POSINT 

State 7:
const -> MINUS FLOAT . [ WHILE THEN STAR SKIP SEMICOLON RSQBRACKET RPARAN RBRACKET PLUS OR OD MINUS LT LPARAN LEQ LBRACKET IF ID HAT GT GEQ FI EQ EOF ELSE DO COMMA ASSUME ASSERT AND ]
-- On WHILE reduce production const -> MINUS FLOAT 
-- On THEN reduce production const -> MINUS FLOAT 
-- On STAR reduce production const -> MINUS FLOAT 
-- On SKIP reduce production const -> MINUS FLOAT 
-- On SEMICOLON reduce production const -> MINUS FLOAT 
-- On RSQBRACKET reduce production const -> MINUS FLOAT 
-- On RPARAN reduce production const -> MINUS FLOAT 
-- On RBRACKET reduce production const -> MINUS FLOAT 
-- On PLUS reduce production const -> MINUS FLOAT 
-- On OR reduce production const -> MINUS FLOAT 
-- On OD reduce production const -> MINUS FLOAT 
-- On MINUS reduce production const -> MINUS FLOAT 
-- On LT reduce production const -> MINUS FLOAT 
-- On LPARAN reduce production const -> MINUS FLOAT 
-- On LEQ reduce production const -> MINUS FLOAT 
-- On LBRACKET reduce production const -> MINUS FLOAT 
-- On IF reduce production const -> MINUS FLOAT 
-- On ID reduce production const -> MINUS FLOAT 
-- On HAT reduce production const -> MINUS FLOAT 
-- On GT reduce production const -> MINUS FLOAT 
-- On GEQ reduce production const -> MINUS FLOAT 
-- On FI reduce production const -> MINUS FLOAT 
-- On EQ reduce production const -> MINUS FLOAT 
-- On EOF reduce production const -> MINUS FLOAT 
-- On ELSE reduce production const -> MINUS FLOAT 
-- On DO reduce production const -> MINUS FLOAT 
-- On COMMA reduce production const -> MINUS FLOAT 
-- On ASSUME reduce production const -> MINUS FLOAT 
-- On ASSERT reduce production const -> MINUS FLOAT 
-- On AND reduce production const -> MINUS FLOAT 

State 8:
expr -> LPARAN . expr RPARAN [ WHILE THEN STAR SKIP SEMICOLON RPARAN RBRACKET PLUS OR OD MINUS LT LPARAN LEQ LBRACKET IF ID HAT GT GEQ FI EQ EOF ELSE DO ASSUME ASSERT AND ]
-- On POSINT shift to state 3
-- On MINUS shift to state 5
-- On LPARAN shift to state 8
-- On ID shift to state 9
-- On FLOAT shift to state 10
-- On pvar shift to state 11
-- On expr shift to state 12
-- On const shift to state 17

State 9:
pvar -> ID . [ WHILE THEN STAR SKIP SEMICOLON RPARAN RBRACKET PLUS OR OD MINUS LT LPARAN LEQ LBRACKET IF ID HAT GT GEQ FI EQ EOF ELSE DO ASSUME ASSGN ASSERT AND ]
-- On WHILE reduce production pvar -> ID 
-- On THEN reduce production pvar -> ID 
-- On STAR reduce production pvar -> ID 
-- On SKIP reduce production pvar -> ID 
-- On SEMICOLON reduce production pvar -> ID 
-- On RPARAN reduce production pvar -> ID 
-- On RBRACKET reduce production pvar -> ID 
-- On PLUS reduce production pvar -> ID 
-- On OR reduce production pvar -> ID 
-- On OD reduce production pvar -> ID 
-- On MINUS reduce production pvar -> ID 
-- On LT reduce production pvar -> ID 
-- On LPARAN reduce production pvar -> ID 
-- On LEQ reduce production pvar -> ID 
-- On LBRACKET reduce production pvar -> ID 
-- On IF reduce production pvar -> ID 
-- On ID reduce production pvar -> ID 
-- On HAT reduce production pvar -> ID 
-- On GT reduce production pvar -> ID 
-- On GEQ reduce production pvar -> ID 
-- On FI reduce production pvar -> ID 
-- On EQ reduce production pvar -> ID 
-- On EOF reduce production pvar -> ID 
-- On ELSE reduce production pvar -> ID 
-- On DO reduce production pvar -> ID 
-- On ASSUME reduce production pvar -> ID 
-- On ASSGN reduce production pvar -> ID 
-- On ASSERT reduce production pvar -> ID 
-- On AND reduce production pvar -> ID 

State 10:
const -> FLOAT . [ WHILE THEN STAR SKIP SEMICOLON RSQBRACKET RPARAN RBRACKET PLUS OR OD MINUS LT LPARAN LEQ LBRACKET IF ID HAT GT GEQ FI EQ EOF ELSE DO COMMA ASSUME ASSERT AND ]
-- On WHILE reduce production const -> FLOAT 
-- On THEN reduce production const -> FLOAT 
-- On STAR reduce production const -> FLOAT 
-- On SKIP reduce production const -> FLOAT 
-- On SEMICOLON reduce production const -> FLOAT 
-- On RSQBRACKET reduce production const -> FLOAT 
-- On RPARAN reduce production const -> FLOAT 
-- On RBRACKET reduce production const -> FLOAT 
-- On PLUS reduce production const -> FLOAT 
-- On OR reduce production const -> FLOAT 
-- On OD reduce production const -> FLOAT 
-- On MINUS reduce production const -> FLOAT 
-- On LT reduce production const -> FLOAT 
-- On LPARAN reduce production const -> FLOAT 
-- On LEQ reduce production const -> FLOAT 
-- On LBRACKET reduce production const -> FLOAT 
-- On IF reduce production const -> FLOAT 
-- On ID reduce production const -> FLOAT 
-- On HAT reduce production const -> FLOAT 
-- On GT reduce production const -> FLOAT 
-- On GEQ reduce production const -> FLOAT 
-- On FI reduce production const -> FLOAT 
-- On EQ reduce production const -> FLOAT 
-- On EOF reduce production const -> FLOAT 
-- On ELSE reduce production const -> FLOAT 
-- On DO reduce production const -> FLOAT 
-- On COMMA reduce production const -> FLOAT 
-- On ASSUME reduce production const -> FLOAT 
-- On ASSERT reduce production const -> FLOAT 
-- On AND reduce production const -> FLOAT 

State 11:
expr -> pvar . [ WHILE THEN STAR SKIP SEMICOLON RPARAN RBRACKET PLUS OR OD MINUS LT LPARAN LEQ LBRACKET IF ID HAT GT GEQ FI EQ EOF ELSE DO ASSUME ASSERT AND ]
-- On WHILE reduce production expr -> pvar 
-- On THEN reduce production expr -> pvar 
-- On STAR reduce production expr -> pvar 
-- On SKIP reduce production expr -> pvar 
-- On SEMICOLON reduce production expr -> pvar 
-- On RPARAN reduce production expr -> pvar 
-- On RBRACKET reduce production expr -> pvar 
-- On PLUS reduce production expr -> pvar 
-- On OR reduce production expr -> pvar 
-- On OD reduce production expr -> pvar 
-- On MINUS reduce production expr -> pvar 
-- On LT reduce production expr -> pvar 
-- On LPARAN reduce production expr -> pvar 
-- On LEQ reduce production expr -> pvar 
-- On LBRACKET reduce production expr -> pvar 
-- On IF reduce production expr -> pvar 
-- On ID reduce production expr -> pvar 
-- On HAT reduce production expr -> pvar 
-- On GT reduce production expr -> pvar 
-- On GEQ reduce production expr -> pvar 
-- On FI reduce production expr -> pvar 
-- On EQ reduce production expr -> pvar 
-- On EOF reduce production expr -> pvar 
-- On ELSE reduce production expr -> pvar 
-- On DO reduce production expr -> pvar 
-- On ASSUME reduce production expr -> pvar 
-- On ASSERT reduce production expr -> pvar 
-- On AND reduce production expr -> pvar 

State 12:
expr -> LPARAN expr . RPARAN [ WHILE THEN STAR SKIP SEMICOLON RPARAN RBRACKET PLUS OR OD MINUS LT LPARAN LEQ LBRACKET IF ID HAT GT GEQ FI EQ EOF ELSE DO ASSUME ASSERT AND ]
expr -> expr . PLUS expr [ STAR RPARAN PLUS MINUS HAT ]
expr -> expr . MINUS expr [ STAR RPARAN PLUS MINUS HAT ]
expr -> expr . STAR expr [ STAR RPARAN PLUS MINUS HAT ]
expr -> expr . HAT POSINT [ STAR RPARAN PLUS MINUS HAT ]
-- On STAR shift to state 13
-- On RPARAN shift to state 18
-- On PLUS shift to state 19
-- On MINUS shift to state 21
-- On HAT shift to state 15

State 13:
expr -> expr STAR . expr [ WHILE THEN STAR SKIP SEMICOLON RPARAN RBRACKET PLUS OR OD MINUS LT LPARAN LEQ LBRACKET IF ID HAT GT GEQ FI EQ EOF ELSE DO ASSUME ASSERT AND ]
-- On POSINT shift to state 3
-- On MINUS shift to state 5
-- On LPARAN shift to state 8
-- On ID shift to state 9
-- On FLOAT shift to state 10
-- On pvar shift to state 11
-- On expr shift to state 14
-- On const shift to state 17

State 14:
expr -> expr . PLUS expr [ WHILE THEN STAR SKIP SEMICOLON RPARAN RBRACKET PLUS OR OD MINUS LT LPARAN LEQ LBRACKET IF ID HAT GT GEQ FI EQ EOF ELSE DO ASSUME ASSERT AND ]
expr -> expr . MINUS expr [ WHILE THEN STAR SKIP SEMICOLON RPARAN RBRACKET PLUS OR OD MINUS LT LPARAN LEQ LBRACKET IF ID HAT GT GEQ FI EQ EOF ELSE DO ASSUME ASSERT AND ]
expr -> expr . STAR expr [ WHILE THEN STAR SKIP SEMICOLON RPARAN RBRACKET PLUS OR OD MINUS LT LPARAN LEQ LBRACKET IF ID HAT GT GEQ FI EQ EOF ELSE DO ASSUME ASSERT AND ]
expr -> expr STAR expr . [ WHILE THEN STAR SKIP SEMICOLON RPARAN RBRACKET PLUS OR OD MINUS LT LPARAN LEQ LBRACKET IF ID HAT GT GEQ FI EQ EOF ELSE DO ASSUME ASSERT AND ]
expr -> expr . HAT POSINT [ WHILE THEN STAR SKIP SEMICOLON RPARAN RBRACKET PLUS OR OD MINUS LT LPARAN LEQ LBRACKET IF ID HAT GT GEQ FI EQ EOF ELSE DO ASSUME ASSERT AND ]
-- On HAT shift to state 15
-- On WHILE reduce production expr -> expr STAR expr 
-- On THEN reduce production expr -> expr STAR expr 
-- On STAR reduce production expr -> expr STAR expr 
-- On SKIP reduce production expr -> expr STAR expr 
-- On SEMICOLON reduce production expr -> expr STAR expr 
-- On RPARAN reduce production expr -> expr STAR expr 
-- On RBRACKET reduce production expr -> expr STAR expr 
-- On PLUS reduce production expr -> expr STAR expr 
-- On OR reduce production expr -> expr STAR expr 
-- On OD reduce production expr -> expr STAR expr 
-- On MINUS reduce production expr -> expr STAR expr 
-- On LT reduce production expr -> expr STAR expr 
-- On LPARAN reduce production expr -> expr STAR expr 
-- On LEQ reduce production expr -> expr STAR expr 
-- On LBRACKET reduce production expr -> expr STAR expr 
-- On IF reduce production expr -> expr STAR expr 
-- On ID reduce production expr -> expr STAR expr 
-- On GT reduce production expr -> expr STAR expr 
-- On GEQ reduce production expr -> expr STAR expr 
-- On FI reduce production expr -> expr STAR expr 
-- On EQ reduce production expr -> expr STAR expr 
-- On EOF reduce production expr -> expr STAR expr 
-- On ELSE reduce production expr -> expr STAR expr 
-- On DO reduce production expr -> expr STAR expr 
-- On ASSUME reduce production expr -> expr STAR expr 
-- On ASSERT reduce production expr -> expr STAR expr 
-- On AND reduce production expr -> expr STAR expr 

State 15:
expr -> expr HAT . POSINT [ WHILE THEN STAR SKIP SEMICOLON RPARAN RBRACKET PLUS OR OD MINUS LT LPARAN LEQ LBRACKET IF ID HAT GT GEQ FI EQ EOF ELSE DO ASSUME ASSERT AND ]
-- On POSINT shift to state 16

State 16:
expr -> expr HAT POSINT . [ WHILE THEN STAR SKIP SEMICOLON RPARAN RBRACKET PLUS OR OD MINUS LT LPARAN LEQ LBRACKET IF ID HAT GT GEQ FI EQ EOF ELSE DO ASSUME ASSERT AND ]
-- On WHILE reduce production expr -> expr HAT POSINT 
-- On THEN reduce production expr -> expr HAT POSINT 
-- On STAR reduce production expr -> expr HAT POSINT 
-- On SKIP reduce production expr -> expr HAT POSINT 
-- On SEMICOLON reduce production expr -> expr HAT POSINT 
-- On RPARAN reduce production expr -> expr HAT POSINT 
-- On RBRACKET reduce production expr -> expr HAT POSINT 
-- On PLUS reduce production expr -> expr HAT POSINT 
-- On OR reduce production expr -> expr HAT POSINT 
-- On OD reduce production expr -> expr HAT POSINT 
-- On MINUS reduce production expr -> expr HAT POSINT 
-- On LT reduce production expr -> expr HAT POSINT 
-- On LPARAN reduce production expr -> expr HAT POSINT 
-- On LEQ reduce production expr -> expr HAT POSINT 
-- On LBRACKET reduce production expr -> expr HAT POSINT 
-- On IF reduce production expr -> expr HAT POSINT 
-- On ID reduce production expr -> expr HAT POSINT 
-- On HAT reduce production expr -> expr HAT POSINT 
-- On GT reduce production expr -> expr HAT POSINT 
-- On GEQ reduce production expr -> expr HAT POSINT 
-- On FI reduce production expr -> expr HAT POSINT 
-- On EQ reduce production expr -> expr HAT POSINT 
-- On EOF reduce production expr -> expr HAT POSINT 
-- On ELSE reduce production expr -> expr HAT POSINT 
-- On DO reduce production expr -> expr HAT POSINT 
-- On ASSUME reduce production expr -> expr HAT POSINT 
-- On ASSERT reduce production expr -> expr HAT POSINT 
-- On AND reduce production expr -> expr HAT POSINT 

State 17:
expr -> const . [ WHILE THEN STAR SKIP SEMICOLON RPARAN RBRACKET PLUS OR OD MINUS LT LPARAN LEQ LBRACKET IF ID HAT GT GEQ FI EQ EOF ELSE DO ASSUME ASSERT AND ]
-- On WHILE reduce production expr -> const 
-- On THEN reduce production expr -> const 
-- On STAR reduce production expr -> const 
-- On SKIP reduce production expr -> const 
-- On SEMICOLON reduce production expr -> const 
-- On RPARAN reduce production expr -> const 
-- On RBRACKET reduce production expr -> const 
-- On PLUS reduce production expr -> const 
-- On OR reduce production expr -> const 
-- On OD reduce production expr -> const 
-- On MINUS reduce production expr -> const 
-- On LT reduce production expr -> const 
-- On LPARAN reduce production expr -> const 
-- On LEQ reduce production expr -> const 
-- On LBRACKET reduce production expr -> const 
-- On IF reduce production expr -> const 
-- On ID reduce production expr -> const 
-- On HAT reduce production expr -> const 
-- On GT reduce production expr -> const 
-- On GEQ reduce production expr -> const 
-- On FI reduce production expr -> const 
-- On EQ reduce production expr -> const 
-- On EOF reduce production expr -> const 
-- On ELSE reduce production expr -> const 
-- On DO reduce production expr -> const 
-- On ASSUME reduce production expr -> const 
-- On ASSERT reduce production expr -> const 
-- On AND reduce production expr -> const 

State 18:
expr -> LPARAN expr RPARAN . [ WHILE THEN STAR SKIP SEMICOLON RPARAN RBRACKET PLUS OR OD MINUS LT LPARAN LEQ LBRACKET IF ID HAT GT GEQ FI EQ EOF ELSE DO ASSUME ASSERT AND ]
-- On WHILE reduce production expr -> LPARAN expr RPARAN 
-- On THEN reduce production expr -> LPARAN expr RPARAN 
-- On STAR reduce production expr -> LPARAN expr RPARAN 
-- On SKIP reduce production expr -> LPARAN expr RPARAN 
-- On SEMICOLON reduce production expr -> LPARAN expr RPARAN 
-- On RPARAN reduce production expr -> LPARAN expr RPARAN 
-- On RBRACKET reduce production expr -> LPARAN expr RPARAN 
-- On PLUS reduce production expr -> LPARAN expr RPARAN 
-- On OR reduce production expr -> LPARAN expr RPARAN 
-- On OD reduce production expr -> LPARAN expr RPARAN 
-- On MINUS reduce production expr -> LPARAN expr RPARAN 
-- On LT reduce production expr -> LPARAN expr RPARAN 
-- On LPARAN reduce production expr -> LPARAN expr RPARAN 
-- On LEQ reduce production expr -> LPARAN expr RPARAN 
-- On LBRACKET reduce production expr -> LPARAN expr RPARAN 
-- On IF reduce production expr -> LPARAN expr RPARAN 
-- On ID reduce production expr -> LPARAN expr RPARAN 
-- On HAT reduce production expr -> LPARAN expr RPARAN 
-- On GT reduce production expr -> LPARAN expr RPARAN 
-- On GEQ reduce production expr -> LPARAN expr RPARAN 
-- On FI reduce production expr -> LPARAN expr RPARAN 
-- On EQ reduce production expr -> LPARAN expr RPARAN 
-- On EOF reduce production expr -> LPARAN expr RPARAN 
-- On ELSE reduce production expr -> LPARAN expr RPARAN 
-- On DO reduce production expr -> LPARAN expr RPARAN 
-- On ASSUME reduce production expr -> LPARAN expr RPARAN 
-- On ASSERT reduce production expr -> LPARAN expr RPARAN 
-- On AND reduce production expr -> LPARAN expr RPARAN 

State 19:
expr -> expr PLUS . expr [ WHILE THEN STAR SKIP SEMICOLON RPARAN RBRACKET PLUS OR OD MINUS LT LPARAN LEQ LBRACKET IF ID HAT GT GEQ FI EQ EOF ELSE DO ASSUME ASSERT AND ]
-- On POSINT shift to state 3
-- On MINUS shift to state 5
-- On LPARAN shift to state 8
-- On ID shift to state 9
-- On FLOAT shift to state 10
-- On pvar shift to state 11
-- On expr shift to state 20
-- On const shift to state 17

State 20:
expr -> expr . PLUS expr [ WHILE THEN STAR SKIP SEMICOLON RPARAN RBRACKET PLUS OR OD MINUS LT LPARAN LEQ LBRACKET IF ID HAT GT GEQ FI EQ EOF ELSE DO ASSUME ASSERT AND ]
expr -> expr PLUS expr . [ WHILE THEN STAR SKIP SEMICOLON RPARAN RBRACKET PLUS OR OD MINUS LT LPARAN LEQ LBRACKET IF ID HAT GT GEQ FI EQ EOF ELSE DO ASSUME ASSERT AND ]
expr -> expr . MINUS expr [ WHILE THEN STAR SKIP SEMICOLON RPARAN RBRACKET PLUS OR OD MINUS LT LPARAN LEQ LBRACKET IF ID HAT GT GEQ FI EQ EOF ELSE DO ASSUME ASSERT AND ]
expr -> expr . STAR expr [ WHILE THEN STAR SKIP SEMICOLON RPARAN RBRACKET PLUS OR OD MINUS LT LPARAN LEQ LBRACKET IF ID HAT GT GEQ FI EQ EOF ELSE DO ASSUME ASSERT AND ]
expr -> expr . HAT POSINT [ WHILE THEN STAR SKIP SEMICOLON RPARAN RBRACKET PLUS OR OD MINUS LT LPARAN LEQ LBRACKET IF ID HAT GT GEQ FI EQ EOF ELSE DO ASSUME ASSERT AND ]
-- On STAR shift to state 13
-- On HAT shift to state 15
-- On WHILE reduce production expr -> expr PLUS expr 
-- On THEN reduce production expr -> expr PLUS expr 
-- On SKIP reduce production expr -> expr PLUS expr 
-- On SEMICOLON reduce production expr -> expr PLUS expr 
-- On RPARAN reduce production expr -> expr PLUS expr 
-- On RBRACKET reduce production expr -> expr PLUS expr 
-- On PLUS reduce production expr -> expr PLUS expr 
-- On OR reduce production expr -> expr PLUS expr 
-- On OD reduce production expr -> expr PLUS expr 
-- On MINUS reduce production expr -> expr PLUS expr 
-- On LT reduce production expr -> expr PLUS expr 
-- On LPARAN reduce production expr -> expr PLUS expr 
-- On LEQ reduce production expr -> expr PLUS expr 
-- On LBRACKET reduce production expr -> expr PLUS expr 
-- On IF reduce production expr -> expr PLUS expr 
-- On ID reduce production expr -> expr PLUS expr 
-- On GT reduce production expr -> expr PLUS expr 
-- On GEQ reduce production expr -> expr PLUS expr 
-- On FI reduce production expr -> expr PLUS expr 
-- On EQ reduce production expr -> expr PLUS expr 
-- On EOF reduce production expr -> expr PLUS expr 
-- On ELSE reduce production expr -> expr PLUS expr 
-- On DO reduce production expr -> expr PLUS expr 
-- On ASSUME reduce production expr -> expr PLUS expr 
-- On ASSERT reduce production expr -> expr PLUS expr 
-- On AND reduce production expr -> expr PLUS expr 

State 21:
expr -> expr MINUS . expr [ WHILE THEN STAR SKIP SEMICOLON RPARAN RBRACKET PLUS OR OD MINUS LT LPARAN LEQ LBRACKET IF ID HAT GT GEQ FI EQ EOF ELSE DO ASSUME ASSERT AND ]
-- On POSINT shift to state 3
-- On MINUS shift to state 5
-- On LPARAN shift to state 8
-- On ID shift to state 9
-- On FLOAT shift to state 10
-- On pvar shift to state 11
-- On expr shift to state 22
-- On const shift to state 17

State 22:
expr -> expr . PLUS expr [ WHILE THEN STAR SKIP SEMICOLON RPARAN RBRACKET PLUS OR OD MINUS LT LPARAN LEQ LBRACKET IF ID HAT GT GEQ FI EQ EOF ELSE DO ASSUME ASSERT AND ]
expr -> expr . MINUS expr [ WHILE THEN STAR SKIP SEMICOLON RPARAN RBRACKET PLUS OR OD MINUS LT LPARAN LEQ LBRACKET IF ID HAT GT GEQ FI EQ EOF ELSE DO ASSUME ASSERT AND ]
expr -> expr MINUS expr . [ WHILE THEN STAR SKIP SEMICOLON RPARAN RBRACKET PLUS OR OD MINUS LT LPARAN LEQ LBRACKET IF ID HAT GT GEQ FI EQ EOF ELSE DO ASSUME ASSERT AND ]
expr -> expr . STAR expr [ WHILE THEN STAR SKIP SEMICOLON RPARAN RBRACKET PLUS OR OD MINUS LT LPARAN LEQ LBRACKET IF ID HAT GT GEQ FI EQ EOF ELSE DO ASSUME ASSERT AND ]
expr -> expr . HAT POSINT [ WHILE THEN STAR SKIP SEMICOLON RPARAN RBRACKET PLUS OR OD MINUS LT LPARAN LEQ LBRACKET IF ID HAT GT GEQ FI EQ EOF ELSE DO ASSUME ASSERT AND ]
-- On STAR shift to state 13
-- On HAT shift to state 15
-- On WHILE reduce production expr -> expr MINUS expr 
-- On THEN reduce production expr -> expr MINUS expr 
-- On SKIP reduce production expr -> expr MINUS expr 
-- On SEMICOLON reduce production expr -> expr MINUS expr 
-- On RPARAN reduce production expr -> expr MINUS expr 
-- On RBRACKET reduce production expr -> expr MINUS expr 
-- On PLUS reduce production expr -> expr MINUS expr 
-- On OR reduce production expr -> expr MINUS expr 
-- On OD reduce production expr -> expr MINUS expr 
-- On MINUS reduce production expr -> expr MINUS expr 
-- On LT reduce production expr -> expr MINUS expr 
-- On LPARAN reduce production expr -> expr MINUS expr 
-- On LEQ reduce production expr -> expr MINUS expr 
-- On LBRACKET reduce production expr -> expr MINUS expr 
-- On IF reduce production expr -> expr MINUS expr 
-- On ID reduce production expr -> expr MINUS expr 
-- On GT reduce production expr -> expr MINUS expr 
-- On GEQ reduce production expr -> expr MINUS expr 
-- On FI reduce production expr -> expr MINUS expr 
-- On EQ reduce production expr -> expr MINUS expr 
-- On EOF reduce production expr -> expr MINUS expr 
-- On ELSE reduce production expr -> expr MINUS expr 
-- On DO reduce production expr -> expr MINUS expr 
-- On ASSUME reduce production expr -> expr MINUS expr 
-- On ASSERT reduce production expr -> expr MINUS expr 
-- On AND reduce production expr -> expr MINUS expr 

State 23:
literal -> FALSE . [ WHILE THEN SKIP SEMICOLON RPARAN RBRACKET OR OD LPARAN LBRACKET IF ID FI EOF ELSE DO ASSUME ASSERT AND ]
-- On WHILE reduce production literal -> FALSE 
-- On THEN reduce production literal -> FALSE 
-- On SKIP reduce production literal -> FALSE 
-- On SEMICOLON reduce production literal -> FALSE 
-- On RPARAN reduce production literal -> FALSE 
-- On RBRACKET reduce production literal -> FALSE 
-- On OR reduce production literal -> FALSE 
-- On OD reduce production literal -> FALSE 
-- On LPARAN reduce production literal -> FALSE 
-- On LBRACKET reduce production literal -> FALSE 
-- On IF reduce production literal -> FALSE 
-- On ID reduce production literal -> FALSE 
-- On FI reduce production literal -> FALSE 
-- On EOF reduce production literal -> FALSE 
-- On ELSE reduce production literal -> FALSE 
-- On DO reduce production literal -> FALSE 
-- On ASSUME reduce production literal -> FALSE 
-- On ASSERT reduce production literal -> FALSE 
-- On AND reduce production literal -> FALSE 

State 24:
literal -> NOT literal . [ WHILE THEN SKIP SEMICOLON RPARAN RBRACKET OR OD LPARAN LBRACKET IF ID FI EOF ELSE DO ASSUME ASSERT AND ]
-- On WHILE reduce production literal -> NOT literal 
-- On THEN reduce production literal -> NOT literal 
-- On SKIP reduce production literal -> NOT literal 
-- On SEMICOLON reduce production literal -> NOT literal 
-- On RPARAN reduce production literal -> NOT literal 
-- On RBRACKET reduce production literal -> NOT literal 
-- On OR reduce production literal -> NOT literal 
-- On OD reduce production literal -> NOT literal 
-- On LPARAN reduce production literal -> NOT literal 
-- On LBRACKET reduce production literal -> NOT literal 
-- On IF reduce production literal -> NOT literal 
-- On ID reduce production literal -> NOT literal 
-- On FI reduce production literal -> NOT literal 
-- On EOF reduce production literal -> NOT literal 
-- On ELSE reduce production literal -> NOT literal 
-- On DO reduce production literal -> NOT literal 
-- On ASSUME reduce production literal -> NOT literal 
-- On ASSERT reduce production literal -> NOT literal 
-- On AND reduce production literal -> NOT literal 

State 25:
expr -> expr . PLUS expr [ STAR PLUS MINUS LT LEQ HAT GT GEQ ]
expr -> expr . MINUS expr [ STAR PLUS MINUS LT LEQ HAT GT GEQ ]
expr -> expr . STAR expr [ STAR PLUS MINUS LT LEQ HAT GT GEQ ]
expr -> expr . HAT POSINT [ STAR PLUS MINUS LT LEQ HAT GT GEQ ]
literal -> expr . LEQ expr [ WHILE THEN SKIP SEMICOLON RPARAN RBRACKET OR OD LPARAN LBRACKET IF ID FI EOF ELSE DO ASSUME ASSERT AND ]
literal -> expr . GEQ expr [ WHILE THEN SKIP SEMICOLON RPARAN RBRACKET OR OD LPARAN LBRACKET IF ID FI EOF ELSE DO ASSUME ASSERT AND ]
literal -> expr . LT expr [ WHILE THEN SKIP SEMICOLON RPARAN RBRACKET OR OD LPARAN LBRACKET IF ID FI EOF ELSE DO ASSUME ASSERT AND ]
literal -> expr . GT expr [ WHILE THEN SKIP SEMICOLON RPARAN RBRACKET OR OD LPARAN LBRACKET IF ID FI EOF ELSE DO ASSUME ASSERT AND ]
-- On STAR shift to state 13
-- On PLUS shift to state 19
-- On MINUS shift to state 21
-- On LT shift to state 26
-- On LEQ shift to state 28
-- On HAT shift to state 15
-- On GT shift to state 30
-- On GEQ shift to state 32

State 26:
literal -> expr LT . expr [ WHILE THEN SKIP SEMICOLON RPARAN RBRACKET OR OD LPARAN LBRACKET IF ID FI EOF ELSE DO ASSUME ASSERT AND ]
-- On POSINT shift to state 3
-- On MINUS shift to state 5
-- On LPARAN shift to state 8
-- On ID shift to state 9
-- On FLOAT shift to state 10
-- On pvar shift to state 11
-- On expr shift to state 27
-- On const shift to state 17

State 27:
expr -> expr . PLUS expr [ WHILE THEN STAR SKIP SEMICOLON RPARAN RBRACKET PLUS OR OD MINUS LPARAN LBRACKET IF ID HAT FI EOF ELSE DO ASSUME ASSERT AND ]
expr -> expr . MINUS expr [ WHILE THEN STAR SKIP SEMICOLON RPARAN RBRACKET PLUS OR OD MINUS LPARAN LBRACKET IF ID HAT FI EOF ELSE DO ASSUME ASSERT AND ]
expr -> expr . STAR expr [ WHILE THEN STAR SKIP SEMICOLON RPARAN RBRACKET PLUS OR OD MINUS LPARAN LBRACKET IF ID HAT FI EOF ELSE DO ASSUME ASSERT AND ]
expr -> expr . HAT POSINT [ WHILE THEN STAR SKIP SEMICOLON RPARAN RBRACKET PLUS OR OD MINUS LPARAN LBRACKET IF ID HAT FI EOF ELSE DO ASSUME ASSERT AND ]
literal -> expr LT expr . [ WHILE THEN SKIP SEMICOLON RPARAN RBRACKET OR OD LPARAN LBRACKET IF ID FI EOF ELSE DO ASSUME ASSERT AND ]
-- On STAR shift to state 13
-- On PLUS shift to state 19
-- On MINUS shift to state 21
-- On HAT shift to state 15
-- On WHILE reduce production literal -> expr LT expr 
-- On THEN reduce production literal -> expr LT expr 
-- On SKIP reduce production literal -> expr LT expr 
-- On SEMICOLON reduce production literal -> expr LT expr 
-- On RPARAN reduce production literal -> expr LT expr 
-- On RBRACKET reduce production literal -> expr LT expr 
-- On OR reduce production literal -> expr LT expr 
-- On OD reduce production literal -> expr LT expr 
-- On LPARAN reduce production literal -> expr LT expr 
-- On LBRACKET reduce production literal -> expr LT expr 
-- On IF reduce production literal -> expr LT expr 
-- On ID reduce production literal -> expr LT expr 
-- On FI reduce production literal -> expr LT expr 
-- On EOF reduce production literal -> expr LT expr 
-- On ELSE reduce production literal -> expr LT expr 
-- On DO reduce production literal -> expr LT expr 
-- On ASSUME reduce production literal -> expr LT expr 
-- On ASSERT reduce production literal -> expr LT expr 
-- On AND reduce production literal -> expr LT expr 

State 28:
literal -> expr LEQ . expr [ WHILE THEN SKIP SEMICOLON RPARAN RBRACKET OR OD LPARAN LBRACKET IF ID FI EOF ELSE DO ASSUME ASSERT AND ]
-- On POSINT shift to state 3
-- On MINUS shift to state 5
-- On LPARAN shift to state 8
-- On ID shift to state 9
-- On FLOAT shift to state 10
-- On pvar shift to state 11
-- On expr shift to state 29
-- On const shift to state 17

State 29:
expr -> expr . PLUS expr [ WHILE THEN STAR SKIP SEMICOLON RPARAN RBRACKET PLUS OR OD MINUS LPARAN LBRACKET IF ID HAT FI EOF ELSE DO ASSUME ASSERT AND ]
expr -> expr . MINUS expr [ WHILE THEN STAR SKIP SEMICOLON RPARAN RBRACKET PLUS OR OD MINUS LPARAN LBRACKET IF ID HAT FI EOF ELSE DO ASSUME ASSERT AND ]
expr -> expr . STAR expr [ WHILE THEN STAR SKIP SEMICOLON RPARAN RBRACKET PLUS OR OD MINUS LPARAN LBRACKET IF ID HAT FI EOF ELSE DO ASSUME ASSERT AND ]
expr -> expr . HAT POSINT [ WHILE THEN STAR SKIP SEMICOLON RPARAN RBRACKET PLUS OR OD MINUS LPARAN LBRACKET IF ID HAT FI EOF ELSE DO ASSUME ASSERT AND ]
literal -> expr LEQ expr . [ WHILE THEN SKIP SEMICOLON RPARAN RBRACKET OR OD LPARAN LBRACKET IF ID FI EOF ELSE DO ASSUME ASSERT AND ]
-- On STAR shift to state 13
-- On PLUS shift to state 19
-- On MINUS shift to state 21
-- On HAT shift to state 15
-- On WHILE reduce production literal -> expr LEQ expr 
-- On THEN reduce production literal -> expr LEQ expr 
-- On SKIP reduce production literal -> expr LEQ expr 
-- On SEMICOLON reduce production literal -> expr LEQ expr 
-- On RPARAN reduce production literal -> expr LEQ expr 
-- On RBRACKET reduce production literal -> expr LEQ expr 
-- On OR reduce production literal -> expr LEQ expr 
-- On OD reduce production literal -> expr LEQ expr 
-- On LPARAN reduce production literal -> expr LEQ expr 
-- On LBRACKET reduce production literal -> expr LEQ expr 
-- On IF reduce production literal -> expr LEQ expr 
-- On ID reduce production literal -> expr LEQ expr 
-- On FI reduce production literal -> expr LEQ expr 
-- On EOF reduce production literal -> expr LEQ expr 
-- On ELSE reduce production literal -> expr LEQ expr 
-- On DO reduce production literal -> expr LEQ expr 
-- On ASSUME reduce production literal -> expr LEQ expr 
-- On ASSERT reduce production literal -> expr LEQ expr 
-- On AND reduce production literal -> expr LEQ expr 

State 30:
literal -> expr GT . expr [ WHILE THEN SKIP SEMICOLON RPARAN RBRACKET OR OD LPARAN LBRACKET IF ID FI EOF ELSE DO ASSUME ASSERT AND ]
-- On POSINT shift to state 3
-- On MINUS shift to state 5
-- On LPARAN shift to state 8
-- On ID shift to state 9
-- On FLOAT shift to state 10
-- On pvar shift to state 11
-- On expr shift to state 31
-- On const shift to state 17

State 31:
expr -> expr . PLUS expr [ WHILE THEN STAR SKIP SEMICOLON RPARAN RBRACKET PLUS OR OD MINUS LPARAN LBRACKET IF ID HAT FI EOF ELSE DO ASSUME ASSERT AND ]
expr -> expr . MINUS expr [ WHILE THEN STAR SKIP SEMICOLON RPARAN RBRACKET PLUS OR OD MINUS LPARAN LBRACKET IF ID HAT FI EOF ELSE DO ASSUME ASSERT AND ]
expr -> expr . STAR expr [ WHILE THEN STAR SKIP SEMICOLON RPARAN RBRACKET PLUS OR OD MINUS LPARAN LBRACKET IF ID HAT FI EOF ELSE DO ASSUME ASSERT AND ]
expr -> expr . HAT POSINT [ WHILE THEN STAR SKIP SEMICOLON RPARAN RBRACKET PLUS OR OD MINUS LPARAN LBRACKET IF ID HAT FI EOF ELSE DO ASSUME ASSERT AND ]
literal -> expr GT expr . [ WHILE THEN SKIP SEMICOLON RPARAN RBRACKET OR OD LPARAN LBRACKET IF ID FI EOF ELSE DO ASSUME ASSERT AND ]
-- On STAR shift to state 13
-- On PLUS shift to state 19
-- On MINUS shift to state 21
-- On HAT shift to state 15
-- On WHILE reduce production literal -> expr GT expr 
-- On THEN reduce production literal -> expr GT expr 
-- On SKIP reduce production literal -> expr GT expr 
-- On SEMICOLON reduce production literal -> expr GT expr 
-- On RPARAN reduce production literal -> expr GT expr 
-- On RBRACKET reduce production literal -> expr GT expr 
-- On OR reduce production literal -> expr GT expr 
-- On OD reduce production literal -> expr GT expr 
-- On LPARAN reduce production literal -> expr GT expr 
-- On LBRACKET reduce production literal -> expr GT expr 
-- On IF reduce production literal -> expr GT expr 
-- On ID reduce production literal -> expr GT expr 
-- On FI reduce production literal -> expr GT expr 
-- On EOF reduce production literal -> expr GT expr 
-- On ELSE reduce production literal -> expr GT expr 
-- On DO reduce production literal -> expr GT expr 
-- On ASSUME reduce production literal -> expr GT expr 
-- On ASSERT reduce production literal -> expr GT expr 
-- On AND reduce production literal -> expr GT expr 

State 32:
literal -> expr GEQ . expr [ WHILE THEN SKIP SEMICOLON RPARAN RBRACKET OR OD LPARAN LBRACKET IF ID FI EOF ELSE DO ASSUME ASSERT AND ]
-- On POSINT shift to state 3
-- On MINUS shift to state 5
-- On LPARAN shift to state 8
-- On ID shift to state 9
-- On FLOAT shift to state 10
-- On pvar shift to state 11
-- On expr shift to state 33
-- On const shift to state 17

State 33:
expr -> expr . PLUS expr [ WHILE THEN STAR SKIP SEMICOLON RPARAN RBRACKET PLUS OR OD MINUS LPARAN LBRACKET IF ID HAT FI EOF ELSE DO ASSUME ASSERT AND ]
expr -> expr . MINUS expr [ WHILE THEN STAR SKIP SEMICOLON RPARAN RBRACKET PLUS OR OD MINUS LPARAN LBRACKET IF ID HAT FI EOF ELSE DO ASSUME ASSERT AND ]
expr -> expr . STAR expr [ WHILE THEN STAR SKIP SEMICOLON RPARAN RBRACKET PLUS OR OD MINUS LPARAN LBRACKET IF ID HAT FI EOF ELSE DO ASSUME ASSERT AND ]
expr -> expr . HAT POSINT [ WHILE THEN STAR SKIP SEMICOLON RPARAN RBRACKET PLUS OR OD MINUS LPARAN LBRACKET IF ID HAT FI EOF ELSE DO ASSUME ASSERT AND ]
literal -> expr GEQ expr . [ WHILE THEN SKIP SEMICOLON RPARAN RBRACKET OR OD LPARAN LBRACKET IF ID FI EOF ELSE DO ASSUME ASSERT AND ]
-- On STAR shift to state 13
-- On PLUS shift to state 19
-- On MINUS shift to state 21
-- On HAT shift to state 15
-- On WHILE reduce production literal -> expr GEQ expr 
-- On THEN reduce production literal -> expr GEQ expr 
-- On SKIP reduce production literal -> expr GEQ expr 
-- On SEMICOLON reduce production literal -> expr GEQ expr 
-- On RPARAN reduce production literal -> expr GEQ expr 
-- On RBRACKET reduce production literal -> expr GEQ expr 
-- On OR reduce production literal -> expr GEQ expr 
-- On OD reduce production literal -> expr GEQ expr 
-- On LPARAN reduce production literal -> expr GEQ expr 
-- On LBRACKET reduce production literal -> expr GEQ expr 
-- On IF reduce production literal -> expr GEQ expr 
-- On ID reduce production literal -> expr GEQ expr 
-- On FI reduce production literal -> expr GEQ expr 
-- On EOF reduce production literal -> expr GEQ expr 
-- On ELSE reduce production literal -> expr GEQ expr 
-- On DO reduce production literal -> expr GEQ expr 
-- On ASSUME reduce production literal -> expr GEQ expr 
-- On ASSERT reduce production literal -> expr GEQ expr 
-- On AND reduce production literal -> expr GEQ expr 

State 34:
affexpr -> LPARAN . affexpr RPARAN [ WHILE THEN SKIP SEMICOLON RPARAN RBRACKET OR OD LPARAN LBRACKET IF ID FI EOF ELSE DO ASSUME ASSERT AND ]
expr -> LPARAN . expr RPARAN [ STAR RPARAN PLUS MINUS LT LEQ HAT GT GEQ EQ ]
-- On TRUE shift to state 2
-- On POSINT shift to state 3
-- On NOT shift to state 4
-- On MINUS shift to state 5
-- On LPARAN shift to state 34
-- On ID shift to state 9
-- On FLOAT shift to state 10
-- On FALSE shift to state 23
-- On pvar shift to state 11
-- On literal shift to state 35
-- On expr shift to state 36
-- On const shift to state 17
-- On affexpr shift to state 39

State 35:
affexpr -> literal . [ WHILE THEN SKIP SEMICOLON RPARAN RBRACKET OR OD LPARAN LBRACKET IF ID FI EOF ELSE DO ASSUME ASSERT AND ]
-- On WHILE reduce production affexpr -> literal 
-- On THEN reduce production affexpr -> literal 
-- On SKIP reduce production affexpr -> literal 
-- On SEMICOLON reduce production affexpr -> literal 
-- On RPARAN reduce production affexpr -> literal 
-- On RBRACKET reduce production affexpr -> literal 
-- On OR reduce production affexpr -> literal 
-- On OD reduce production affexpr -> literal 
-- On LPARAN reduce production affexpr -> literal 
-- On LBRACKET reduce production affexpr -> literal 
-- On IF reduce production affexpr -> literal 
-- On ID reduce production affexpr -> literal 
-- On FI reduce production affexpr -> literal 
-- On EOF reduce production affexpr -> literal 
-- On ELSE reduce production affexpr -> literal 
-- On DO reduce production affexpr -> literal 
-- On ASSUME reduce production affexpr -> literal 
-- On ASSERT reduce production affexpr -> literal 
-- On AND reduce production affexpr -> literal 

State 36:
affexpr -> expr . EQ expr [ RPARAN AND ]
expr -> LPARAN expr . RPARAN [ STAR RPARAN PLUS MINUS LT LEQ HAT GT GEQ EQ ]
expr -> expr . PLUS expr [ STAR RPARAN PLUS MINUS LT LEQ HAT GT GEQ EQ ]
expr -> expr . MINUS expr [ STAR RPARAN PLUS MINUS LT LEQ HAT GT GEQ EQ ]
expr -> expr . STAR expr [ STAR RPARAN PLUS MINUS LT LEQ HAT GT GEQ EQ ]
expr -> expr . HAT POSINT [ STAR RPARAN PLUS MINUS LT LEQ HAT GT GEQ EQ ]
literal -> expr . LEQ expr [ RPARAN AND ]
literal -> expr . GEQ expr [ RPARAN AND ]
literal -> expr . LT expr [ RPARAN AND ]
literal -> expr . GT expr [ RPARAN AND ]
-- On STAR shift to state 13
-- On RPARAN shift to state 18
-- On PLUS shift to state 19
-- On MINUS shift to state 21
-- On LT shift to state 26
-- On LEQ shift to state 28
-- On HAT shift to state 15
-- On GT shift to state 30
-- On GEQ shift to state 32
-- On EQ shift to state 37

State 37:
affexpr -> expr EQ . expr [ WHILE THEN SKIP SEMICOLON RPARAN RBRACKET OR OD LPARAN LBRACKET IF ID FI EOF ELSE DO ASSUME ASSERT AND ]
-- On POSINT shift to state 3
-- On MINUS shift to state 5
-- On LPARAN shift to state 8
-- On ID shift to state 9
-- On FLOAT shift to state 10
-- On pvar shift to state 11
-- On expr shift to state 38
-- On const shift to state 17

State 38:
affexpr -> expr EQ expr . [ WHILE THEN SKIP SEMICOLON RPARAN RBRACKET OR OD LPARAN LBRACKET IF ID FI EOF ELSE DO ASSUME ASSERT AND ]
expr -> expr . PLUS expr [ WHILE THEN STAR SKIP SEMICOLON RPARAN RBRACKET PLUS OR OD MINUS LPARAN LBRACKET IF ID HAT FI EOF ELSE DO ASSUME ASSERT AND ]
expr -> expr . MINUS expr [ WHILE THEN STAR SKIP SEMICOLON RPARAN RBRACKET PLUS OR OD MINUS LPARAN LBRACKET IF ID HAT FI EOF ELSE DO ASSUME ASSERT AND ]
expr -> expr . STAR expr [ WHILE THEN STAR SKIP SEMICOLON RPARAN RBRACKET PLUS OR OD MINUS LPARAN LBRACKET IF ID HAT FI EOF ELSE DO ASSUME ASSERT AND ]
expr -> expr . HAT POSINT [ WHILE THEN STAR SKIP SEMICOLON RPARAN RBRACKET PLUS OR OD MINUS LPARAN LBRACKET IF ID HAT FI EOF ELSE DO ASSUME ASSERT AND ]
-- On STAR shift to state 13
-- On PLUS shift to state 19
-- On MINUS shift to state 21
-- On HAT shift to state 15
-- On WHILE reduce production affexpr -> expr EQ expr 
-- On THEN reduce production affexpr -> expr EQ expr 
-- On SKIP reduce production affexpr -> expr EQ expr 
-- On SEMICOLON reduce production affexpr -> expr EQ expr 
-- On RPARAN reduce production affexpr -> expr EQ expr 
-- On RBRACKET reduce production affexpr -> expr EQ expr 
-- On OR reduce production affexpr -> expr EQ expr 
-- On OD reduce production affexpr -> expr EQ expr 
-- On LPARAN reduce production affexpr -> expr EQ expr 
-- On LBRACKET reduce production affexpr -> expr EQ expr 
-- On IF reduce production affexpr -> expr EQ expr 
-- On ID reduce production affexpr -> expr EQ expr 
-- On FI reduce production affexpr -> expr EQ expr 
-- On EOF reduce production affexpr -> expr EQ expr 
-- On ELSE reduce production affexpr -> expr EQ expr 
-- On DO reduce production affexpr -> expr EQ expr 
-- On ASSUME reduce production affexpr -> expr EQ expr 
-- On ASSERT reduce production affexpr -> expr EQ expr 
-- On AND reduce production affexpr -> expr EQ expr 

State 39:
affexpr -> LPARAN affexpr . RPARAN [ WHILE THEN SKIP SEMICOLON RPARAN RBRACKET OR OD LPARAN LBRACKET IF ID FI EOF ELSE DO ASSUME ASSERT AND ]
affexpr -> affexpr . AND affexpr [ RPARAN AND ]
-- On RPARAN shift to state 40
-- On AND shift to state 41

State 40:
affexpr -> LPARAN affexpr RPARAN . [ WHILE THEN SKIP SEMICOLON RPARAN RBRACKET OR OD LPARAN LBRACKET IF ID FI EOF ELSE DO ASSUME ASSERT AND ]
-- On WHILE reduce production affexpr -> LPARAN affexpr RPARAN 
-- On THEN reduce production affexpr -> LPARAN affexpr RPARAN 
-- On SKIP reduce production affexpr -> LPARAN affexpr RPARAN 
-- On SEMICOLON reduce production affexpr -> LPARAN affexpr RPARAN 
-- On RPARAN reduce production affexpr -> LPARAN affexpr RPARAN 
-- On RBRACKET reduce production affexpr -> LPARAN affexpr RPARAN 
-- On OR reduce production affexpr -> LPARAN affexpr RPARAN 
-- On OD reduce production affexpr -> LPARAN affexpr RPARAN 
-- On LPARAN reduce production affexpr -> LPARAN affexpr RPARAN 
-- On LBRACKET reduce production affexpr -> LPARAN affexpr RPARAN 
-- On IF reduce production affexpr -> LPARAN affexpr RPARAN 
-- On ID reduce production affexpr -> LPARAN affexpr RPARAN 
-- On FI reduce production affexpr -> LPARAN affexpr RPARAN 
-- On EOF reduce production affexpr -> LPARAN affexpr RPARAN 
-- On ELSE reduce production affexpr -> LPARAN affexpr RPARAN 
-- On DO reduce production affexpr -> LPARAN affexpr RPARAN 
-- On ASSUME reduce production affexpr -> LPARAN affexpr RPARAN 
-- On ASSERT reduce production affexpr -> LPARAN affexpr RPARAN 
-- On AND reduce production affexpr -> LPARAN affexpr RPARAN 

State 41:
affexpr -> affexpr AND . affexpr [ WHILE THEN SKIP SEMICOLON RPARAN RBRACKET OR OD LPARAN LBRACKET IF ID FI EOF ELSE DO ASSUME ASSERT AND ]
-- On TRUE shift to state 2
-- On POSINT shift to state 3
-- On NOT shift to state 4
-- On MINUS shift to state 5
-- On LPARAN shift to state 34
-- On ID shift to state 9
-- On FLOAT shift to state 10
-- On FALSE shift to state 23
-- On pvar shift to state 11
-- On literal shift to state 35
-- On expr shift to state 42
-- On const shift to state 17
-- On affexpr shift to state 43

State 42:
affexpr -> expr . EQ expr [ WHILE THEN SKIP SEMICOLON RPARAN RBRACKET OR OD LPARAN LBRACKET IF ID FI EOF ELSE DO ASSUME ASSERT AND ]
expr -> expr . PLUS expr [ STAR PLUS MINUS LT LEQ HAT GT GEQ EQ ]
expr -> expr . MINUS expr [ STAR PLUS MINUS LT LEQ HAT GT GEQ EQ ]
expr -> expr . STAR expr [ STAR PLUS MINUS LT LEQ HAT GT GEQ EQ ]
expr -> expr . HAT POSINT [ STAR PLUS MINUS LT LEQ HAT GT GEQ EQ ]
literal -> expr . LEQ expr [ WHILE THEN SKIP SEMICOLON RPARAN RBRACKET OR OD LPARAN LBRACKET IF ID FI EOF ELSE DO ASSUME ASSERT AND ]
literal -> expr . GEQ expr [ WHILE THEN SKIP SEMICOLON RPARAN RBRACKET OR OD LPARAN LBRACKET IF ID FI EOF ELSE DO ASSUME ASSERT AND ]
literal -> expr . LT expr [ WHILE THEN SKIP SEMICOLON RPARAN RBRACKET OR OD LPARAN LBRACKET IF ID FI EOF ELSE DO ASSUME ASSERT AND ]
literal -> expr . GT expr [ WHILE THEN SKIP SEMICOLON RPARAN RBRACKET OR OD LPARAN LBRACKET IF ID FI EOF ELSE DO ASSUME ASSERT AND ]
-- On STAR shift to state 13
-- On PLUS shift to state 19
-- On MINUS shift to state 21
-- On LT shift to state 26
-- On LEQ shift to state 28
-- On HAT shift to state 15
-- On GT shift to state 30
-- On GEQ shift to state 32
-- On EQ shift to state 37

State 43:
affexpr -> affexpr . AND affexpr [ WHILE THEN SKIP SEMICOLON RPARAN RBRACKET OR OD LPARAN LBRACKET IF ID FI EOF ELSE DO ASSUME ASSERT AND ]
affexpr -> affexpr AND affexpr . [ WHILE THEN SKIP SEMICOLON RPARAN RBRACKET OR OD LPARAN LBRACKET IF ID FI EOF ELSE DO ASSUME ASSERT AND ]
-- On WHILE reduce production affexpr -> affexpr AND affexpr 
-- On THEN reduce production affexpr -> affexpr AND affexpr 
-- On SKIP reduce production affexpr -> affexpr AND affexpr 
-- On SEMICOLON reduce production affexpr -> affexpr AND affexpr 
-- On RPARAN reduce production affexpr -> affexpr AND affexpr 
-- On RBRACKET reduce production affexpr -> affexpr AND affexpr 
-- On OR reduce production affexpr -> affexpr AND affexpr 
-- On OD reduce production affexpr -> affexpr AND affexpr 
-- On LPARAN reduce production affexpr -> affexpr AND affexpr 
-- On LBRACKET reduce production affexpr -> affexpr AND affexpr 
-- On IF reduce production affexpr -> affexpr AND affexpr 
-- On ID reduce production affexpr -> affexpr AND affexpr 
-- On FI reduce production affexpr -> affexpr AND affexpr 
-- On EOF reduce production affexpr -> affexpr AND affexpr 
-- On ELSE reduce production affexpr -> affexpr AND affexpr 
-- On DO reduce production affexpr -> affexpr AND affexpr 
-- On ASSUME reduce production affexpr -> affexpr AND affexpr 
-- On ASSERT reduce production affexpr -> affexpr AND affexpr 
-- On AND reduce production affexpr -> affexpr AND affexpr 

State 44:
stmt -> WHILE bexpr . DO stmt OD [ SEMICOLON RPARAN OD FI EOF ELSE ]
-- On DO shift to state 45

State 45:
stmt -> WHILE bexpr DO . stmt OD [ SEMICOLON RPARAN OD FI EOF ELSE ]
-- On WHILE shift to state 1
-- On SKIP shift to state 46
-- On LPARAN shift to state 47
-- On LBRACKET shift to state 48
-- On IF shift to state 51
-- On ID shift to state 9
-- On ASSUME shift to state 59
-- On ASSERT shift to state 64
-- On stmt shift to state 108
-- On pvar shift to state 69
-- On assgn shift to state 100

State 46:
stmt -> SKIP . [ SEMICOLON RPARAN OD FI EOF ELSE ]
-- On SEMICOLON reduce production stmt -> SKIP 
-- On RPARAN reduce production stmt -> SKIP 
-- On OD reduce production stmt -> SKIP 
-- On FI reduce production stmt -> SKIP 
-- On EOF reduce production stmt -> SKIP 
-- On ELSE reduce production stmt -> SKIP 

State 47:
stmt -> LPARAN . stmt RPARAN [ SEMICOLON RPARAN OD FI EOF ELSE ]
-- On WHILE shift to state 1
-- On SKIP shift to state 46
-- On LPARAN shift to state 47
-- On LBRACKET shift to state 48
-- On IF shift to state 51
-- On ID shift to state 9
-- On ASSUME shift to state 59
-- On ASSERT shift to state 64
-- On stmt shift to state 106
-- On pvar shift to state 69
-- On assgn shift to state 100

State 48:
stmt -> LBRACKET . bexpr RBRACKET [ SEMICOLON RPARAN OD FI EOF ELSE ]
stmt -> LBRACKET . bexpr RBRACKET stmt [ SEMICOLON RPARAN OD FI EOF ELSE ]
-- On TRUE shift to state 2
-- On POSINT shift to state 3
-- On NOT shift to state 4
-- On MINUS shift to state 5
-- On LPARAN shift to state 34
-- On ID shift to state 9
-- On FLOAT shift to state 10
-- On FALSE shift to state 23
-- On pvar shift to state 11
-- On literal shift to state 35
-- On expr shift to state 42
-- On const shift to state 17
-- On bexpr shift to state 49
-- On affexpr shift to state 61

State 49:
stmt -> LBRACKET bexpr . RBRACKET [ SEMICOLON RPARAN OD FI EOF ELSE ]
stmt -> LBRACKET bexpr . RBRACKET stmt [ SEMICOLON RPARAN OD FI EOF ELSE ]
-- On RBRACKET shift to state 50

State 50:
stmt -> LBRACKET bexpr RBRACKET . [ SEMICOLON RPARAN OD FI EOF ELSE ]
stmt -> LBRACKET bexpr RBRACKET . stmt [ SEMICOLON RPARAN OD FI EOF ELSE ]
-- On WHILE shift to state 1
-- On SKIP shift to state 46
-- On LPARAN shift to state 47
-- On LBRACKET shift to state 48
-- On IF shift to state 51
-- On ID shift to state 9
-- On ASSUME shift to state 59
-- On ASSERT shift to state 64
-- On stmt shift to state 105
-- On pvar shift to state 69
-- On assgn shift to state 100
-- On SEMICOLON reduce production stmt -> LBRACKET bexpr RBRACKET 
-- On RPARAN reduce production stmt -> LBRACKET bexpr RBRACKET 
-- On OD reduce production stmt -> LBRACKET bexpr RBRACKET 
-- On FI reduce production stmt -> LBRACKET bexpr RBRACKET 
-- On EOF reduce production stmt -> LBRACKET bexpr RBRACKET 
-- On ELSE reduce production stmt -> LBRACKET bexpr RBRACKET 

State 51:
stmt -> IF . ndbexpr THEN stmt ELSE stmt FI [ SEMICOLON RPARAN OD FI EOF ELSE ]
-- On TRUE shift to state 2
-- On STAR shift to state 52
-- On PROB shift to state 53
-- On POSINT shift to state 3
-- On NOT shift to state 4
-- On MINUS shift to state 5
-- On LPARAN shift to state 34
-- On ID shift to state 9
-- On FLOAT shift to state 10
-- On FALSE shift to state 23
-- On pvar shift to state 11
-- On ndbexpr shift to state 57
-- On literal shift to state 35
-- On expr shift to state 42
-- On const shift to state 17
-- On bexpr shift to state 104
-- On affexpr shift to state 61

State 52:
ndbexpr -> STAR . [ THEN ]
-- On THEN reduce production ndbexpr -> STAR 

State 53:
ndbexpr -> PROB . LPARAN const RPARAN [ THEN ]
-- On LPARAN shift to state 54

State 54:
ndbexpr -> PROB LPARAN . const RPARAN [ THEN ]
-- On POSINT shift to state 3
-- On MINUS shift to state 5
-- On FLOAT shift to state 10
-- On const shift to state 55

State 55:
ndbexpr -> PROB LPARAN const . RPARAN [ THEN ]
-- On RPARAN shift to state 56

State 56:
ndbexpr -> PROB LPARAN const RPARAN . [ THEN ]
-- On THEN reduce production ndbexpr -> PROB LPARAN const RPARAN 

State 57:
stmt -> IF ndbexpr . THEN stmt ELSE stmt FI [ SEMICOLON RPARAN OD FI EOF ELSE ]
-- On THEN shift to state 58

State 58:
stmt -> IF ndbexpr THEN . stmt ELSE stmt FI [ SEMICOLON RPARAN OD FI EOF ELSE ]
-- On WHILE shift to state 1
-- On SKIP shift to state 46
-- On LPARAN shift to state 47
-- On LBRACKET shift to state 48
-- On IF shift to state 51
-- On ID shift to state 9
-- On ASSUME shift to state 59
-- On ASSERT shift to state 64
-- On stmt shift to state 66
-- On pvar shift to state 69
-- On assgn shift to state 100

State 59:
stmt -> ASSUME . bexpr [ SEMICOLON RPARAN OD FI EOF ELSE ]
-- On TRUE shift to state 2
-- On POSINT shift to state 3
-- On NOT shift to state 4
-- On MINUS shift to state 5
-- On LPARAN shift to state 34
-- On ID shift to state 9
-- On FLOAT shift to state 10
-- On FALSE shift to state 23
-- On pvar shift to state 11
-- On literal shift to state 35
-- On expr shift to state 42
-- On const shift to state 17
-- On bexpr shift to state 60
-- On affexpr shift to state 61

State 60:
stmt -> ASSUME bexpr . [ SEMICOLON RPARAN OD FI EOF ELSE ]
-- On SEMICOLON reduce production stmt -> ASSUME bexpr 
-- On RPARAN reduce production stmt -> ASSUME bexpr 
-- On OD reduce production stmt -> ASSUME bexpr 
-- On FI reduce production stmt -> ASSUME bexpr 
-- On EOF reduce production stmt -> ASSUME bexpr 
-- On ELSE reduce production stmt -> ASSUME bexpr 

State 61:
affexpr -> affexpr . AND affexpr [ WHILE THEN SKIP SEMICOLON RPARAN RBRACKET OR OD LPARAN LBRACKET IF ID FI EOF ELSE DO ASSUME ASSERT AND ]
bexpr -> affexpr . [ WHILE THEN SKIP SEMICOLON RPARAN RBRACKET OD LPARAN LBRACKET IF ID FI EOF ELSE DO ASSUME ASSERT ]
bexpr -> affexpr . OR bexpr [ WHILE THEN SKIP SEMICOLON RPARAN RBRACKET OD LPARAN LBRACKET IF ID FI EOF ELSE DO ASSUME ASSERT ]
-- On OR shift to state 62
-- On AND shift to state 41
-- On WHILE reduce production bexpr -> affexpr 
-- On THEN reduce production bexpr -> affexpr 
-- On SKIP reduce production bexpr -> affexpr 
-- On SEMICOLON reduce production bexpr -> affexpr 
-- On RPARAN reduce production bexpr -> affexpr 
-- On RBRACKET reduce production bexpr -> affexpr 
-- On OD reduce production bexpr -> affexpr 
-- On LPARAN reduce production bexpr -> affexpr 
-- On LBRACKET reduce production bexpr -> affexpr 
-- On IF reduce production bexpr -> affexpr 
-- On ID reduce production bexpr -> affexpr 
-- On FI reduce production bexpr -> affexpr 
-- On EOF reduce production bexpr -> affexpr 
-- On ELSE reduce production bexpr -> affexpr 
-- On DO reduce production bexpr -> affexpr 
-- On ASSUME reduce production bexpr -> affexpr 
-- On ASSERT reduce production bexpr -> affexpr 

State 62:
bexpr -> affexpr OR . bexpr [ WHILE THEN SKIP SEMICOLON RPARAN RBRACKET OD LPARAN LBRACKET IF ID FI EOF ELSE DO ASSUME ASSERT ]
-- On TRUE shift to state 2
-- On POSINT shift to state 3
-- On NOT shift to state 4
-- On MINUS shift to state 5
-- On LPARAN shift to state 34
-- On ID shift to state 9
-- On FLOAT shift to state 10
-- On FALSE shift to state 23
-- On pvar shift to state 11
-- On literal shift to state 35
-- On expr shift to state 42
-- On const shift to state 17
-- On bexpr shift to state 63
-- On affexpr shift to state 61

State 63:
bexpr -> affexpr OR bexpr . [ WHILE THEN SKIP SEMICOLON RPARAN RBRACKET OD LPARAN LBRACKET IF ID FI EOF ELSE DO ASSUME ASSERT ]
-- On WHILE reduce production bexpr -> affexpr OR bexpr 
-- On THEN reduce production bexpr -> affexpr OR bexpr 
-- On SKIP reduce production bexpr -> affexpr OR bexpr 
-- On SEMICOLON reduce production bexpr -> affexpr OR bexpr 
-- On RPARAN reduce production bexpr -> affexpr OR bexpr 
-- On RBRACKET reduce production bexpr -> affexpr OR bexpr 
-- On OD reduce production bexpr -> affexpr OR bexpr 
-- On LPARAN reduce production bexpr -> affexpr OR bexpr 
-- On LBRACKET reduce production bexpr -> affexpr OR bexpr 
-- On IF reduce production bexpr -> affexpr OR bexpr 
-- On ID reduce production bexpr -> affexpr OR bexpr 
-- On FI reduce production bexpr -> affexpr OR bexpr 
-- On EOF reduce production bexpr -> affexpr OR bexpr 
-- On ELSE reduce production bexpr -> affexpr OR bexpr 
-- On DO reduce production bexpr -> affexpr OR bexpr 
-- On ASSUME reduce production bexpr -> affexpr OR bexpr 
-- On ASSERT reduce production bexpr -> affexpr OR bexpr 

State 64:
stmt -> ASSERT . bexpr [ SEMICOLON RPARAN OD FI EOF ELSE ]
-- On TRUE shift to state 2
-- On POSINT shift to state 3
-- On NOT shift to state 4
-- On MINUS shift to state 5
-- On LPARAN shift to state 34
-- On ID shift to state 9
-- On FLOAT shift to state 10
-- On FALSE shift to state 23
-- On pvar shift to state 11
-- On literal shift to state 35
-- On expr shift to state 42
-- On const shift to state 17
-- On bexpr shift to state 65
-- On affexpr shift to state 61

State 65:
stmt -> ASSERT bexpr . [ SEMICOLON RPARAN OD FI EOF ELSE ]
-- On SEMICOLON reduce production stmt -> ASSERT bexpr 
-- On RPARAN reduce production stmt -> ASSERT bexpr 
-- On OD reduce production stmt -> ASSERT bexpr 
-- On FI reduce production stmt -> ASSERT bexpr 
-- On EOF reduce production stmt -> ASSERT bexpr 
-- On ELSE reduce production stmt -> ASSERT bexpr 

State 66:
stmt -> stmt . SEMICOLON stmt [ SEMICOLON ELSE ]
stmt -> IF ndbexpr THEN stmt . ELSE stmt FI [ SEMICOLON RPARAN OD FI EOF ELSE ]
-- On SEMICOLON shift to state 67
-- On ELSE shift to state 101

State 67:
stmt -> stmt SEMICOLON . stmt [ SEMICOLON RPARAN OD FI EOF ELSE ]
-- On WHILE shift to state 1
-- On SKIP shift to state 46
-- On LPARAN shift to state 47
-- On LBRACKET shift to state 48
-- On IF shift to state 51
-- On ID shift to state 9
-- On ASSUME shift to state 59
-- On ASSERT shift to state 64
-- On stmt shift to state 68
-- On pvar shift to state 69
-- On assgn shift to state 100

State 68:
stmt -> stmt . SEMICOLON stmt [ SEMICOLON RPARAN OD FI EOF ELSE ]
stmt -> stmt SEMICOLON stmt . [ SEMICOLON RPARAN OD FI EOF ELSE ]
-- On SEMICOLON reduce production stmt -> stmt SEMICOLON stmt 
-- On RPARAN reduce production stmt -> stmt SEMICOLON stmt 
-- On OD reduce production stmt -> stmt SEMICOLON stmt 
-- On FI reduce production stmt -> stmt SEMICOLON stmt 
-- On EOF reduce production stmt -> stmt SEMICOLON stmt 
-- On ELSE reduce production stmt -> stmt SEMICOLON stmt 

State 69:
assgn -> pvar . ASSGN expr [ SEMICOLON RPARAN OD FI EOF ELSE ]
assgn -> pvar . ASSGN NDET dom [ SEMICOLON RPARAN OD FI EOF ELSE ]
assgn -> pvar . ASSGN dist [ SEMICOLON RPARAN OD FI EOF ELSE ]
-- On ASSGN shift to state 70

State 70:
assgn -> pvar ASSGN . expr [ SEMICOLON RPARAN OD FI EOF ELSE ]
assgn -> pvar ASSGN . NDET dom [ SEMICOLON RPARAN OD FI EOF ELSE ]
assgn -> pvar ASSGN . dist [ SEMICOLON RPARAN OD FI EOF ELSE ]
-- On POSINT shift to state 3
-- On NDET shift to state 71
-- On MINUS shift to state 5
-- On LPARAN shift to state 8
-- On ID shift to state 91
-- On FLOAT shift to state 10
-- On pvar shift to state 11
-- On expr shift to state 98
-- On dist shift to state 99
-- On const shift to state 17

State 71:
assgn -> pvar ASSGN NDET . dom [ SEMICOLON RPARAN OD FI EOF ELSE ]
-- On REAL shift to state 72
-- On LPARAN shift to state 78
-- On INT shift to state 79
-- On dom_basis shift to state 85
-- On dom shift to state 90

State 72:
dom_basis -> REAL . [ SEMICOLON RPARAN OR OD FI EOF ELSE ]
dom_basis -> REAL . LSQBRACKET const COMMA const RSQBRACKET [ SEMICOLON RPARAN OR OD FI EOF ELSE ]
-- On LSQBRACKET shift to state 73
-- On SEMICOLON reduce production dom_basis -> REAL 
-- On RPARAN reduce production dom_basis -> REAL 
-- On OR reduce production dom_basis -> REAL 
-- On OD reduce production dom_basis -> REAL 
-- On FI reduce production dom_basis -> REAL 
-- On EOF reduce production dom_basis -> REAL 
-- On ELSE reduce production dom_basis -> REAL 

State 73:
dom_basis -> REAL LSQBRACKET . const COMMA const RSQBRACKET [ SEMICOLON RPARAN OR OD FI EOF ELSE ]
-- On POSINT shift to state 3
-- On MINUS shift to state 5
-- On FLOAT shift to state 10
-- On const shift to state 74

State 74:
dom_basis -> REAL LSQBRACKET const . COMMA const RSQBRACKET [ SEMICOLON RPARAN OR OD FI EOF ELSE ]
-- On COMMA shift to state 75

State 75:
dom_basis -> REAL LSQBRACKET const COMMA . const RSQBRACKET [ SEMICOLON RPARAN OR OD FI EOF ELSE ]
-- On POSINT shift to state 3
-- On MINUS shift to state 5
-- On FLOAT shift to state 10
-- On const shift to state 76

State 76:
dom_basis -> REAL LSQBRACKET const COMMA const . RSQBRACKET [ SEMICOLON RPARAN OR OD FI EOF ELSE ]
-- On RSQBRACKET shift to state 77

State 77:
dom_basis -> REAL LSQBRACKET const COMMA const RSQBRACKET . [ SEMICOLON RPARAN OR OD FI EOF ELSE ]
-- On SEMICOLON reduce production dom_basis -> REAL LSQBRACKET const COMMA const RSQBRACKET 
-- On RPARAN reduce production dom_basis -> REAL LSQBRACKET const COMMA const RSQBRACKET 
-- On OR reduce production dom_basis -> REAL LSQBRACKET const COMMA const RSQBRACKET 
-- On OD reduce production dom_basis -> REAL LSQBRACKET const COMMA const RSQBRACKET 
-- On FI reduce production dom_basis -> REAL LSQBRACKET const COMMA const RSQBRACKET 
-- On EOF reduce production dom_basis -> REAL LSQBRACKET const COMMA const RSQBRACKET 
-- On ELSE reduce production dom_basis -> REAL LSQBRACKET const COMMA const RSQBRACKET 

State 78:
dom -> LPARAN . dom RPARAN [ SEMICOLON RPARAN OD FI EOF ELSE ]
-- On REAL shift to state 72
-- On LPARAN shift to state 78
-- On INT shift to state 79
-- On dom_basis shift to state 85
-- On dom shift to state 88

State 79:
dom_basis -> INT . [ SEMICOLON RPARAN OR OD FI EOF ELSE ]
dom_basis -> INT . LSQBRACKET const COMMA const RSQBRACKET [ SEMICOLON RPARAN OR OD FI EOF ELSE ]
-- On LSQBRACKET shift to state 80
-- On SEMICOLON reduce production dom_basis -> INT 
-- On RPARAN reduce production dom_basis -> INT 
-- On OR reduce production dom_basis -> INT 
-- On OD reduce production dom_basis -> INT 
-- On FI reduce production dom_basis -> INT 
-- On EOF reduce production dom_basis -> INT 
-- On ELSE reduce production dom_basis -> INT 

State 80:
dom_basis -> INT LSQBRACKET . const COMMA const RSQBRACKET [ SEMICOLON RPARAN OR OD FI EOF ELSE ]
-- On POSINT shift to state 3
-- On MINUS shift to state 5
-- On FLOAT shift to state 10
-- On const shift to state 81

State 81:
dom_basis -> INT LSQBRACKET const . COMMA const RSQBRACKET [ SEMICOLON RPARAN OR OD FI EOF ELSE ]
-- On COMMA shift to state 82

State 82:
dom_basis -> INT LSQBRACKET const COMMA . const RSQBRACKET [ SEMICOLON RPARAN OR OD FI EOF ELSE ]
-- On POSINT shift to state 3
-- On MINUS shift to state 5
-- On FLOAT shift to state 10
-- On const shift to state 83

State 83:
dom_basis -> INT LSQBRACKET const COMMA const . RSQBRACKET [ SEMICOLON RPARAN OR OD FI EOF ELSE ]
-- On RSQBRACKET shift to state 84

State 84:
dom_basis -> INT LSQBRACKET const COMMA const RSQBRACKET . [ SEMICOLON RPARAN OR OD FI EOF ELSE ]
-- On SEMICOLON reduce production dom_basis -> INT LSQBRACKET const COMMA const RSQBRACKET 
-- On RPARAN reduce production dom_basis -> INT LSQBRACKET const COMMA const RSQBRACKET 
-- On OR reduce production dom_basis -> INT LSQBRACKET const COMMA const RSQBRACKET 
-- On OD reduce production dom_basis -> INT LSQBRACKET const COMMA const RSQBRACKET 
-- On FI reduce production dom_basis -> INT LSQBRACKET const COMMA const RSQBRACKET 
-- On EOF reduce production dom_basis -> INT LSQBRACKET const COMMA const RSQBRACKET 
-- On ELSE reduce production dom_basis -> INT LSQBRACKET const COMMA const RSQBRACKET 

State 85:
dom -> dom_basis . [ SEMICOLON RPARAN OD FI EOF ELSE ]
dom -> dom_basis . OR dom [ SEMICOLON RPARAN OD FI EOF ELSE ]
-- On OR shift to state 86
-- On SEMICOLON reduce production dom -> dom_basis 
-- On RPARAN reduce production dom -> dom_basis 
-- On OD reduce production dom -> dom_basis 
-- On FI reduce production dom -> dom_basis 
-- On EOF reduce production dom -> dom_basis 
-- On ELSE reduce production dom -> dom_basis 

State 86:
dom -> dom_basis OR . dom [ SEMICOLON RPARAN OD FI EOF ELSE ]
-- On REAL shift to state 72
-- On LPARAN shift to state 78
-- On INT shift to state 79
-- On dom_basis shift to state 85
-- On dom shift to state 87

State 87:
dom -> dom_basis OR dom . [ SEMICOLON RPARAN OD FI EOF ELSE ]
-- On SEMICOLON reduce production dom -> dom_basis OR dom 
-- On RPARAN reduce production dom -> dom_basis OR dom 
-- On OD reduce production dom -> dom_basis OR dom 
-- On FI reduce production dom -> dom_basis OR dom 
-- On EOF reduce production dom -> dom_basis OR dom 
-- On ELSE reduce production dom -> dom_basis OR dom 

State 88:
dom -> LPARAN dom . RPARAN [ SEMICOLON RPARAN OD FI EOF ELSE ]
-- On RPARAN shift to state 89

State 89:
dom -> LPARAN dom RPARAN . [ SEMICOLON RPARAN OD FI EOF ELSE ]
-- On SEMICOLON reduce production dom -> LPARAN dom RPARAN 
-- On RPARAN reduce production dom -> LPARAN dom RPARAN 
-- On OD reduce production dom -> LPARAN dom RPARAN 
-- On FI reduce production dom -> LPARAN dom RPARAN 
-- On EOF reduce production dom -> LPARAN dom RPARAN 
-- On ELSE reduce production dom -> LPARAN dom RPARAN 

State 90:
assgn -> pvar ASSGN NDET dom . [ SEMICOLON RPARAN OD FI EOF ELSE ]
-- On SEMICOLON reduce production assgn -> pvar ASSGN NDET dom 
-- On RPARAN reduce production assgn -> pvar ASSGN NDET dom 
-- On OD reduce production assgn -> pvar ASSGN NDET dom 
-- On FI reduce production assgn -> pvar ASSGN NDET dom 
-- On EOF reduce production assgn -> pvar ASSGN NDET dom 
-- On ELSE reduce production assgn -> pvar ASSGN NDET dom 

State 91:
dist -> ID . LPARAN const_list RPARAN [ SEMICOLON RPARAN OD FI EOF ELSE ]
pvar -> ID . [ STAR SEMICOLON RPARAN PLUS OD MINUS HAT FI EOF ELSE ]
-- On LPARAN shift to state 92
-- On STAR reduce production pvar -> ID 
-- On SEMICOLON reduce production pvar -> ID 
-- On RPARAN reduce production pvar -> ID 
-- On PLUS reduce production pvar -> ID 
-- On OD reduce production pvar -> ID 
-- On MINUS reduce production pvar -> ID 
-- On HAT reduce production pvar -> ID 
-- On FI reduce production pvar -> ID 
-- On EOF reduce production pvar -> ID 
-- On ELSE reduce production pvar -> ID 

State 92:
dist -> ID LPARAN . const_list RPARAN [ SEMICOLON RPARAN OD FI EOF ELSE ]
-- On POSINT shift to state 3
-- On MINUS shift to state 5
-- On FLOAT shift to state 10
-- On const_list shift to state 93
-- On const shift to state 95

State 93:
dist -> ID LPARAN const_list . RPARAN [ SEMICOLON RPARAN OD FI EOF ELSE ]
-- On RPARAN shift to state 94

State 94:
dist -> ID LPARAN const_list RPARAN . [ SEMICOLON RPARAN OD FI EOF ELSE ]
-- On SEMICOLON reduce production dist -> ID LPARAN const_list RPARAN 
-- On RPARAN reduce production dist -> ID LPARAN const_list RPARAN 
-- On OD reduce production dist -> ID LPARAN const_list RPARAN 
-- On FI reduce production dist -> ID LPARAN const_list RPARAN 
-- On EOF reduce production dist -> ID LPARAN const_list RPARAN 
-- On ELSE reduce production dist -> ID LPARAN const_list RPARAN 

State 95:
const_list -> const . [ RPARAN ]
const_list -> const . COMMA const_list [ RPARAN ]
-- On COMMA shift to state 96
-- On RPARAN reduce production const_list -> const 

State 96:
const_list -> const COMMA . const_list [ RPARAN ]
-- On POSINT shift to state 3
-- On MINUS shift to state 5
-- On FLOAT shift to state 10
-- On const_list shift to state 97
-- On const shift to state 95

State 97:
const_list -> const COMMA const_list . [ RPARAN ]
-- On RPARAN reduce production const_list -> const COMMA const_list 

State 98:
assgn -> pvar ASSGN expr . [ SEMICOLON RPARAN OD FI EOF ELSE ]
expr -> expr . PLUS expr [ STAR SEMICOLON RPARAN PLUS OD MINUS HAT FI EOF ELSE ]
expr -> expr . MINUS expr [ STAR SEMICOLON RPARAN PLUS OD MINUS HAT FI EOF ELSE ]
expr -> expr . STAR expr [ STAR SEMICOLON RPARAN PLUS OD MINUS HAT FI EOF ELSE ]
expr -> expr . HAT POSINT [ STAR SEMICOLON RPARAN PLUS OD MINUS HAT FI EOF ELSE ]
-- On STAR shift to state 13
-- On PLUS shift to state 19
-- On MINUS shift to state 21
-- On HAT shift to state 15
-- On SEMICOLON reduce production assgn -> pvar ASSGN expr 
-- On RPARAN reduce production assgn -> pvar ASSGN expr 
-- On OD reduce production assgn -> pvar ASSGN expr 
-- On FI reduce production assgn -> pvar ASSGN expr 
-- On EOF reduce production assgn -> pvar ASSGN expr 
-- On ELSE reduce production assgn -> pvar ASSGN expr 

State 99:
assgn -> pvar ASSGN dist . [ SEMICOLON RPARAN OD FI EOF ELSE ]
-- On SEMICOLON reduce production assgn -> pvar ASSGN dist 
-- On RPARAN reduce production assgn -> pvar ASSGN dist 
-- On OD reduce production assgn -> pvar ASSGN dist 
-- On FI reduce production assgn -> pvar ASSGN dist 
-- On EOF reduce production assgn -> pvar ASSGN dist 
-- On ELSE reduce production assgn -> pvar ASSGN dist 

State 100:
stmt -> assgn . [ SEMICOLON RPARAN OD FI EOF ELSE ]
-- On SEMICOLON reduce production stmt -> assgn 
-- On RPARAN reduce production stmt -> assgn 
-- On OD reduce production stmt -> assgn 
-- On FI reduce production stmt -> assgn 
-- On EOF reduce production stmt -> assgn 
-- On ELSE reduce production stmt -> assgn 

State 101:
stmt -> IF ndbexpr THEN stmt ELSE . stmt FI [ SEMICOLON RPARAN OD FI EOF ELSE ]
-- On WHILE shift to state 1
-- On SKIP shift to state 46
-- On LPARAN shift to state 47
-- On LBRACKET shift to state 48
-- On IF shift to state 51
-- On ID shift to state 9
-- On ASSUME shift to state 59
-- On ASSERT shift to state 64
-- On stmt shift to state 102
-- On pvar shift to state 69
-- On assgn shift to state 100

State 102:
stmt -> stmt . SEMICOLON stmt [ SEMICOLON FI ]
stmt -> IF ndbexpr THEN stmt ELSE stmt . FI [ SEMICOLON RPARAN OD FI EOF ELSE ]
-- On SEMICOLON shift to state 67
-- On FI shift to state 103

State 103:
stmt -> IF ndbexpr THEN stmt ELSE stmt FI . [ SEMICOLON RPARAN OD FI EOF ELSE ]
-- On SEMICOLON reduce production stmt -> IF ndbexpr THEN stmt ELSE stmt FI 
-- On RPARAN reduce production stmt -> IF ndbexpr THEN stmt ELSE stmt FI 
-- On OD reduce production stmt -> IF ndbexpr THEN stmt ELSE stmt FI 
-- On FI reduce production stmt -> IF ndbexpr THEN stmt ELSE stmt FI 
-- On EOF reduce production stmt -> IF ndbexpr THEN stmt ELSE stmt FI 
-- On ELSE reduce production stmt -> IF ndbexpr THEN stmt ELSE stmt FI 

State 104:
ndbexpr -> bexpr . [ THEN ]
-- On THEN reduce production ndbexpr -> bexpr 

State 105:
stmt -> stmt . SEMICOLON stmt [ SEMICOLON RPARAN OD FI EOF ELSE ]
stmt -> LBRACKET bexpr RBRACKET stmt . [ SEMICOLON RPARAN OD FI EOF ELSE ]
-- On SEMICOLON reduce production stmt -> LBRACKET bexpr RBRACKET stmt 
-- On RPARAN reduce production stmt -> LBRACKET bexpr RBRACKET stmt 
-- On OD reduce production stmt -> LBRACKET bexpr RBRACKET stmt 
-- On FI reduce production stmt -> LBRACKET bexpr RBRACKET stmt 
-- On EOF reduce production stmt -> LBRACKET bexpr RBRACKET stmt 
-- On ELSE reduce production stmt -> LBRACKET bexpr RBRACKET stmt 

State 106:
stmt -> LPARAN stmt . RPARAN [ SEMICOLON RPARAN OD FI EOF ELSE ]
stmt -> stmt . SEMICOLON stmt [ SEMICOLON RPARAN ]
-- On SEMICOLON shift to state 67
-- On RPARAN shift to state 107

State 107:
stmt -> LPARAN stmt RPARAN . [ SEMICOLON RPARAN OD FI EOF ELSE ]
-- On SEMICOLON reduce production stmt -> LPARAN stmt RPARAN 
-- On RPARAN reduce production stmt -> LPARAN stmt RPARAN 
-- On OD reduce production stmt -> LPARAN stmt RPARAN 
-- On FI reduce production stmt -> LPARAN stmt RPARAN 
-- On EOF reduce production stmt -> LPARAN stmt RPARAN 
-- On ELSE reduce production stmt -> LPARAN stmt RPARAN 

State 108:
stmt -> stmt . SEMICOLON stmt [ SEMICOLON OD ]
stmt -> WHILE bexpr DO stmt . OD [ SEMICOLON RPARAN OD FI EOF ELSE ]
-- On SEMICOLON shift to state 67
-- On OD shift to state 109

State 109:
stmt -> WHILE bexpr DO stmt OD . [ SEMICOLON RPARAN OD FI EOF ELSE ]
-- On SEMICOLON reduce production stmt -> WHILE bexpr DO stmt OD 
-- On RPARAN reduce production stmt -> WHILE bexpr DO stmt OD 
-- On OD reduce production stmt -> WHILE bexpr DO stmt OD 
-- On FI reduce production stmt -> WHILE bexpr DO stmt OD 
-- On EOF reduce production stmt -> WHILE bexpr DO stmt OD 
-- On ELSE reduce production stmt -> WHILE bexpr DO stmt OD 

State 110:
global -> DOLLAR . bexpr [ WHILE SKIP LPARAN LBRACKET IF ID ASSUME ASSERT ]
-- On TRUE shift to state 2
-- On POSINT shift to state 3
-- On NOT shift to state 4
-- On MINUS shift to state 5
-- On LPARAN shift to state 34
-- On ID shift to state 9
-- On FLOAT shift to state 10
-- On FALSE shift to state 23
-- On pvar shift to state 11
-- On literal shift to state 35
-- On expr shift to state 42
-- On const shift to state 17
-- On bexpr shift to state 111
-- On affexpr shift to state 61

State 111:
global -> DOLLAR bexpr . [ WHILE SKIP LPARAN LBRACKET IF ID ASSUME ASSERT ]
-- On WHILE reduce production global -> DOLLAR bexpr 
-- On SKIP reduce production global -> DOLLAR bexpr 
-- On LPARAN reduce production global -> DOLLAR bexpr 
-- On LBRACKET reduce production global -> DOLLAR bexpr 
-- On IF reduce production global -> DOLLAR bexpr 
-- On ID reduce production global -> DOLLAR bexpr 
-- On ASSUME reduce production global -> DOLLAR bexpr 
-- On ASSERT reduce production global -> DOLLAR bexpr 

State 112:
program -> stmt . EOF [ # ]
stmt -> stmt . SEMICOLON stmt [ SEMICOLON EOF ]
-- On SEMICOLON shift to state 67
-- On EOF shift to state 113

State 113:
program -> stmt EOF . [ # ]
-- On # reduce production program -> stmt EOF 

State 114:
program' -> program . [ # ]
-- On # accept program

State 115:
program -> global . stmt EOF [ # ]
-- On WHILE shift to state 1
-- On SKIP shift to state 46
-- On LPARAN shift to state 47
-- On LBRACKET shift to state 48
-- On IF shift to state 51
-- On ID shift to state 9
-- On ASSUME shift to state 59
-- On ASSERT shift to state 64
-- On stmt shift to state 116
-- On pvar shift to state 69
-- On assgn shift to state 100

State 116:
program -> global stmt . EOF [ # ]
stmt -> stmt . SEMICOLON stmt [ SEMICOLON EOF ]
-- On SEMICOLON shift to state 67
-- On EOF shift to state 117

State 117:
program -> global stmt EOF . [ # ]
-- On # reduce production program -> global stmt EOF 

